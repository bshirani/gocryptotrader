// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Gateiocoin is an object representing the database table.
type Gateiocoin struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Base      string    `boil:"base" json:"base" toml:"base" yaml:"base"`
	Quote     string    `boil:"quote" json:"quote" toml:"quote" yaml:"quote"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *gateiocoinR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gateiocoinL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GateiocoinColumns = struct {
	ID        string
	Base      string
	Quote     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Base:      "base",
	Quote:     "quote",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var GateiocoinTableColumns = struct {
	ID        string
	Base      string
	Quote     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "gateiocoin.id",
	Base:      "gateiocoin.base",
	Quote:     "gateiocoin.quote",
	CreatedAt: "gateiocoin.created_at",
	UpdatedAt: "gateiocoin.updated_at",
}

// Generated where

var GateiocoinWhere = struct {
	ID        whereHelperint
	Base      whereHelperstring
	Quote     whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"gateiocoin\".\"id\""},
	Base:      whereHelperstring{field: "\"gateiocoin\".\"base\""},
	Quote:     whereHelperstring{field: "\"gateiocoin\".\"quote\""},
	CreatedAt: whereHelpertime_Time{field: "\"gateiocoin\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"gateiocoin\".\"updated_at\""},
}

// GateiocoinRels is where relationship names are stored.
var GateiocoinRels = struct {
}{}

// gateiocoinR is where relationships are stored.
type gateiocoinR struct {
}

// NewStruct creates a new relationship struct
func (*gateiocoinR) NewStruct() *gateiocoinR {
	return &gateiocoinR{}
}

// gateiocoinL is where Load methods for each relationship are stored.
type gateiocoinL struct{}

var (
	gateiocoinAllColumns            = []string{"id", "base", "quote", "created_at", "updated_at"}
	gateiocoinColumnsWithoutDefault = []string{"base", "quote"}
	gateiocoinColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	gateiocoinPrimaryKeyColumns     = []string{"id"}
)

type (
	// GateiocoinSlice is an alias for a slice of pointers to Gateiocoin.
	// This should almost always be used instead of []Gateiocoin.
	GateiocoinSlice []*Gateiocoin
	// GateiocoinHook is the signature for custom Gateiocoin hook methods
	GateiocoinHook func(context.Context, boil.ContextExecutor, *Gateiocoin) error

	gateiocoinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gateiocoinType                 = reflect.TypeOf(&Gateiocoin{})
	gateiocoinMapping              = queries.MakeStructMapping(gateiocoinType)
	gateiocoinPrimaryKeyMapping, _ = queries.BindMapping(gateiocoinType, gateiocoinMapping, gateiocoinPrimaryKeyColumns)
	gateiocoinInsertCacheMut       sync.RWMutex
	gateiocoinInsertCache          = make(map[string]insertCache)
	gateiocoinUpdateCacheMut       sync.RWMutex
	gateiocoinUpdateCache          = make(map[string]updateCache)
	gateiocoinUpsertCacheMut       sync.RWMutex
	gateiocoinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gateiocoinBeforeInsertHooks []GateiocoinHook
var gateiocoinBeforeUpdateHooks []GateiocoinHook
var gateiocoinBeforeDeleteHooks []GateiocoinHook
var gateiocoinBeforeUpsertHooks []GateiocoinHook

var gateiocoinAfterInsertHooks []GateiocoinHook
var gateiocoinAfterSelectHooks []GateiocoinHook
var gateiocoinAfterUpdateHooks []GateiocoinHook
var gateiocoinAfterDeleteHooks []GateiocoinHook
var gateiocoinAfterUpsertHooks []GateiocoinHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Gateiocoin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Gateiocoin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Gateiocoin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Gateiocoin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Gateiocoin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Gateiocoin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Gateiocoin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Gateiocoin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Gateiocoin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gateiocoinAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGateiocoinHook registers your hook function for all future operations.
func AddGateiocoinHook(hookPoint boil.HookPoint, gateiocoinHook GateiocoinHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gateiocoinBeforeInsertHooks = append(gateiocoinBeforeInsertHooks, gateiocoinHook)
	case boil.BeforeUpdateHook:
		gateiocoinBeforeUpdateHooks = append(gateiocoinBeforeUpdateHooks, gateiocoinHook)
	case boil.BeforeDeleteHook:
		gateiocoinBeforeDeleteHooks = append(gateiocoinBeforeDeleteHooks, gateiocoinHook)
	case boil.BeforeUpsertHook:
		gateiocoinBeforeUpsertHooks = append(gateiocoinBeforeUpsertHooks, gateiocoinHook)
	case boil.AfterInsertHook:
		gateiocoinAfterInsertHooks = append(gateiocoinAfterInsertHooks, gateiocoinHook)
	case boil.AfterSelectHook:
		gateiocoinAfterSelectHooks = append(gateiocoinAfterSelectHooks, gateiocoinHook)
	case boil.AfterUpdateHook:
		gateiocoinAfterUpdateHooks = append(gateiocoinAfterUpdateHooks, gateiocoinHook)
	case boil.AfterDeleteHook:
		gateiocoinAfterDeleteHooks = append(gateiocoinAfterDeleteHooks, gateiocoinHook)
	case boil.AfterUpsertHook:
		gateiocoinAfterUpsertHooks = append(gateiocoinAfterUpsertHooks, gateiocoinHook)
	}
}

// One returns a single gateiocoin record from the query.
func (q gateiocoinQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Gateiocoin, error) {
	o := &Gateiocoin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: failed to execute a one query for gateiocoin")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Gateiocoin records from the query.
func (q gateiocoinQuery) All(ctx context.Context, exec boil.ContextExecutor) (GateiocoinSlice, error) {
	var o []*Gateiocoin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgres: failed to assign all query results to Gateiocoin slice")
	}

	if len(gateiocoinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Gateiocoin records in the query.
func (q gateiocoinQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to count gateiocoin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gateiocoinQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgres: failed to check if gateiocoin exists")
	}

	return count > 0, nil
}

// Gateiocoins retrieves all the records using an executor.
func Gateiocoins(mods ...qm.QueryMod) gateiocoinQuery {
	mods = append(mods, qm.From("\"gateiocoin\""))
	return gateiocoinQuery{NewQuery(mods...)}
}

// FindGateiocoin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGateiocoin(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Gateiocoin, error) {
	gateiocoinObj := &Gateiocoin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gateiocoin\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gateiocoinObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: unable to select from gateiocoin")
	}

	if err = gateiocoinObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gateiocoinObj, err
	}

	return gateiocoinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Gateiocoin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no gateiocoin provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gateiocoinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gateiocoinInsertCacheMut.RLock()
	cache, cached := gateiocoinInsertCache[key]
	gateiocoinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gateiocoinAllColumns,
			gateiocoinColumnsWithDefault,
			gateiocoinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gateiocoinType, gateiocoinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gateiocoinType, gateiocoinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gateiocoin\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gateiocoin\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgres: unable to insert into gateiocoin")
	}

	if !cached {
		gateiocoinInsertCacheMut.Lock()
		gateiocoinInsertCache[key] = cache
		gateiocoinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Gateiocoin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Gateiocoin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gateiocoinUpdateCacheMut.RLock()
	cache, cached := gateiocoinUpdateCache[key]
	gateiocoinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gateiocoinAllColumns,
			gateiocoinPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("postgres: unable to update gateiocoin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gateiocoin\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gateiocoinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gateiocoinType, gateiocoinMapping, append(wl, gateiocoinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update gateiocoin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by update for gateiocoin")
	}

	if !cached {
		gateiocoinUpdateCacheMut.Lock()
		gateiocoinUpdateCache[key] = cache
		gateiocoinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gateiocoinQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all for gateiocoin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected for gateiocoin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GateiocoinSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgres: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gateiocoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gateiocoin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gateiocoinPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all in gateiocoin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected all in update all gateiocoin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Gateiocoin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no gateiocoin provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gateiocoinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gateiocoinUpsertCacheMut.RLock()
	cache, cached := gateiocoinUpsertCache[key]
	gateiocoinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gateiocoinAllColumns,
			gateiocoinColumnsWithDefault,
			gateiocoinColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			gateiocoinAllColumns,
			gateiocoinPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgres: unable to upsert gateiocoin, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gateiocoinPrimaryKeyColumns))
			copy(conflict, gateiocoinPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gateiocoin\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gateiocoinType, gateiocoinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gateiocoinType, gateiocoinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgres: unable to upsert gateiocoin")
	}

	if !cached {
		gateiocoinUpsertCacheMut.Lock()
		gateiocoinUpsertCache[key] = cache
		gateiocoinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Gateiocoin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Gateiocoin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgres: no Gateiocoin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gateiocoinPrimaryKeyMapping)
	sql := "DELETE FROM \"gateiocoin\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete from gateiocoin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by delete for gateiocoin")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gateiocoinQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgres: no gateiocoinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from gateiocoin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for gateiocoin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GateiocoinSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gateiocoinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gateiocoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gateiocoin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gateiocoinPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from gateiocoin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for gateiocoin")
	}

	if len(gateiocoinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Gateiocoin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGateiocoin(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GateiocoinSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GateiocoinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gateiocoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gateiocoin\".* FROM \"gateiocoin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gateiocoinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgres: unable to reload all in GateiocoinSlice")
	}

	*o = slice

	return nil
}

// GateiocoinExists checks if the Gateiocoin row exists.
func GateiocoinExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gateiocoin\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgres: unable to check if gateiocoin exists")
	}

	return exists, nil
}
