// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ok
/////////////////

// LiveSignal is an object representing the database table.
type LiveSignal struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SignalTime   time.Time `boil:"signal_time" json:"signal_time" toml:"signal_time" yaml:"signal_time"`
	ValidUntil   time.Time `boil:"valid_until" json:"valid_until" toml:"valid_until" yaml:"valid_until"`
	Prediction   float64   `boil:"prediction" json:"prediction" toml:"prediction" yaml:"prediction"`
	StrategyName string    `boil:"strategy_name" json:"strategy_name" toml:"strategy_name" yaml:"strategy_name"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *liveSignalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L liveSignalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LiveSignalColumns = struct {
	ID           string
	SignalTime   string
	ValidUntil   string
	Prediction   string
	StrategyName string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	SignalTime:   "signal_time",
	ValidUntil:   "valid_until",
	Prediction:   "prediction",
	StrategyName: "strategy_name",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var LiveSignalTableColumns = struct {
	ID           string
	SignalTime   string
	ValidUntil   string
	Prediction   string
	StrategyName string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "live_signal.id",
	SignalTime:   "live_signal.signal_time",
	ValidUntil:   "live_signal.valid_until",
	Prediction:   "live_signal.prediction",
	StrategyName: "live_signal.strategy_name",
	CreatedAt:    "live_signal.created_at",
	UpdatedAt:    "live_signal.updated_at",
}

// Generated where

var LiveSignalWhere = struct {
	ID           whereHelperint
	SignalTime   whereHelpertime_Time
	ValidUntil   whereHelpertime_Time
	Prediction   whereHelperfloat64
	StrategyName whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"live_signal\".\"id\""},
	SignalTime:   whereHelpertime_Time{field: "\"live_signal\".\"signal_time\""},
	ValidUntil:   whereHelpertime_Time{field: "\"live_signal\".\"valid_until\""},
	Prediction:   whereHelperfloat64{field: "\"live_signal\".\"prediction\""},
	StrategyName: whereHelperstring{field: "\"live_signal\".\"strategy_name\""},
	CreatedAt:    whereHelpertime_Time{field: "\"live_signal\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"live_signal\".\"updated_at\""},
}

// LiveSignalRels is where relationship names are stored.
var LiveSignalRels = struct {
}{}

// liveSignalR is where relationships are stored.
type liveSignalR struct {
}

// NewStruct creates a new relationship struct
func (*liveSignalR) NewStruct() *liveSignalR {
	return &liveSignalR{}
}

// liveSignalL is where Load methods for each relationship are stored.
type liveSignalL struct{}

var (
	liveSignalAllColumns            = []string{"id", "signal_time", "valid_until", "prediction", "strategy_name", "created_at", "updated_at"}
	liveSignalColumnsWithoutDefault = []string{"signal_time", "prediction", "strategy_name"}
	liveSignalColumnsWithDefault    = []string{"id", "valid_until", "created_at", "updated_at"}
	liveSignalPrimaryKeyColumns     = []string{"id"}
)

type (
	// LiveSignalSlice is an alias for a slice of pointers to LiveSignal.
	// This should almost always be used instead of []LiveSignal.
	LiveSignalSlice []*LiveSignal
	// LiveSignalHook is the signature for custom LiveSignal hook methods
	LiveSignalHook func(context.Context, boil.ContextExecutor, *LiveSignal) error

	liveSignalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	liveSignalType                 = reflect.TypeOf(&LiveSignal{})
	liveSignalMapping              = queries.MakeStructMapping(liveSignalType)
	liveSignalPrimaryKeyMapping, _ = queries.BindMapping(liveSignalType, liveSignalMapping, liveSignalPrimaryKeyColumns)
	liveSignalInsertCacheMut       sync.RWMutex
	liveSignalInsertCache          = make(map[string]insertCache)
	liveSignalUpdateCacheMut       sync.RWMutex
	liveSignalUpdateCache          = make(map[string]updateCache)
	liveSignalUpsertCacheMut       sync.RWMutex
	liveSignalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var liveSignalBeforeInsertHooks []LiveSignalHook
var liveSignalBeforeUpdateHooks []LiveSignalHook
var liveSignalBeforeDeleteHooks []LiveSignalHook
var liveSignalBeforeUpsertHooks []LiveSignalHook

var liveSignalAfterInsertHooks []LiveSignalHook
var liveSignalAfterSelectHooks []LiveSignalHook
var liveSignalAfterUpdateHooks []LiveSignalHook
var liveSignalAfterDeleteHooks []LiveSignalHook
var liveSignalAfterUpsertHooks []LiveSignalHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LiveSignal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LiveSignal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LiveSignal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LiveSignal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LiveSignal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LiveSignal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LiveSignal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LiveSignal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LiveSignal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveSignalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLiveSignalHook registers your hook function for all future operations.
func AddLiveSignalHook(hookPoint boil.HookPoint, liveSignalHook LiveSignalHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		liveSignalBeforeInsertHooks = append(liveSignalBeforeInsertHooks, liveSignalHook)
	case boil.BeforeUpdateHook:
		liveSignalBeforeUpdateHooks = append(liveSignalBeforeUpdateHooks, liveSignalHook)
	case boil.BeforeDeleteHook:
		liveSignalBeforeDeleteHooks = append(liveSignalBeforeDeleteHooks, liveSignalHook)
	case boil.BeforeUpsertHook:
		liveSignalBeforeUpsertHooks = append(liveSignalBeforeUpsertHooks, liveSignalHook)
	case boil.AfterInsertHook:
		liveSignalAfterInsertHooks = append(liveSignalAfterInsertHooks, liveSignalHook)
	case boil.AfterSelectHook:
		liveSignalAfterSelectHooks = append(liveSignalAfterSelectHooks, liveSignalHook)
	case boil.AfterUpdateHook:
		liveSignalAfterUpdateHooks = append(liveSignalAfterUpdateHooks, liveSignalHook)
	case boil.AfterDeleteHook:
		liveSignalAfterDeleteHooks = append(liveSignalAfterDeleteHooks, liveSignalHook)
	case boil.AfterUpsertHook:
		liveSignalAfterUpsertHooks = append(liveSignalAfterUpsertHooks, liveSignalHook)
	}
}

// One returns a single liveSignal record from the query.
func (q liveSignalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LiveSignal, error) {
	o := &LiveSignal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: failed to execute a one query for live_signal")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LiveSignal records from the query.
func (q liveSignalQuery) All(ctx context.Context, exec boil.ContextExecutor) (LiveSignalSlice, error) {
	var o []*LiveSignal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgres: failed to assign all query results to LiveSignal slice")
	}

	if len(liveSignalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LiveSignal records in the query.
func (q liveSignalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to count live_signal rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q liveSignalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgres: failed to check if live_signal exists")
	}

	return count > 0, nil
}

// LiveSignals retrieves all the records using an executor.
func LiveSignals(mods ...qm.QueryMod) liveSignalQuery {
	mods = append(mods, qm.From("\"live_signal\""))
	return liveSignalQuery{NewQuery(mods...)}
}

// FindLiveSignal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLiveSignal(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*LiveSignal, error) {
	liveSignalObj := &LiveSignal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"live_signal\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, liveSignalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: unable to select from live_signal")
	}

	if err = liveSignalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return liveSignalObj, err
	}

	return liveSignalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LiveSignal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no live_signal provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(liveSignalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	liveSignalInsertCacheMut.RLock()
	cache, cached := liveSignalInsertCache[key]
	liveSignalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			liveSignalAllColumns,
			liveSignalColumnsWithDefault,
			liveSignalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(liveSignalType, liveSignalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(liveSignalType, liveSignalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"live_signal\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"live_signal\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgres: unable to insert into live_signal")
	}

	if !cached {
		liveSignalInsertCacheMut.Lock()
		liveSignalInsertCache[key] = cache
		liveSignalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LiveSignal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LiveSignal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	liveSignalUpdateCacheMut.RLock()
	cache, cached := liveSignalUpdateCache[key]
	liveSignalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			liveSignalAllColumns,
			liveSignalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("postgres: unable to update live_signal, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"live_signal\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, liveSignalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(liveSignalType, liveSignalMapping, append(wl, liveSignalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update live_signal row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by update for live_signal")
	}

	if !cached {
		liveSignalUpdateCacheMut.Lock()
		liveSignalUpdateCache[key] = cache
		liveSignalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q liveSignalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all for live_signal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected for live_signal")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LiveSignalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgres: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveSignalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"live_signal\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, liveSignalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all in liveSignal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected all in update all liveSignal")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LiveSignal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no live_signal provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(liveSignalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	liveSignalUpsertCacheMut.RLock()
	cache, cached := liveSignalUpsertCache[key]
	liveSignalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			liveSignalAllColumns,
			liveSignalColumnsWithDefault,
			liveSignalColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			liveSignalAllColumns,
			liveSignalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgres: unable to upsert live_signal, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(liveSignalPrimaryKeyColumns))
			copy(conflict, liveSignalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"live_signal\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(liveSignalType, liveSignalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(liveSignalType, liveSignalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgres: unable to upsert live_signal")
	}

	if !cached {
		liveSignalUpsertCacheMut.Lock()
		liveSignalUpsertCache[key] = cache
		liveSignalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LiveSignal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LiveSignal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgres: no LiveSignal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), liveSignalPrimaryKeyMapping)
	sql := "DELETE FROM \"live_signal\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete from live_signal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by delete for live_signal")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q liveSignalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgres: no liveSignalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from live_signal")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for live_signal")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LiveSignalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(liveSignalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveSignalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"live_signal\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, liveSignalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from liveSignal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for live_signal")
	}

	if len(liveSignalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LiveSignal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLiveSignal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LiveSignalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LiveSignalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveSignalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"live_signal\".* FROM \"live_signal\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, liveSignalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgres: unable to reload all in LiveSignalSlice")
	}

	*o = slice

	return nil
}

// LiveSignalExists checks if the LiveSignal row exists.
func LiveSignalExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"live_signal\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgres: unable to check if live_signal exists")
	}

	return exists, nil
}
