// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CurrencyPair is an object representing the database table.
type CurrencyPair struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseID       int       `boil:"base_id" json:"base_id" toml:"base_id" yaml:"base_id"`
	QuoteID      int       `boil:"quote_id" json:"quote_id" toml:"quote_id" yaml:"quote_id"`
	KrakenSymbol string    `boil:"kraken_symbol" json:"kraken_symbol" toml:"kraken_symbol" yaml:"kraken_symbol"`
	Active       bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *currencyPairR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currencyPairL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrencyPairColumns = struct {
	ID           string
	BaseID       string
	QuoteID      string
	KrakenSymbol string
	Active       string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	BaseID:       "base_id",
	QuoteID:      "quote_id",
	KrakenSymbol: "kraken_symbol",
	Active:       "active",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var CurrencyPairTableColumns = struct {
	ID           string
	BaseID       string
	QuoteID      string
	KrakenSymbol string
	Active       string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "currency_pair.id",
	BaseID:       "currency_pair.base_id",
	QuoteID:      "currency_pair.quote_id",
	KrakenSymbol: "currency_pair.kraken_symbol",
	Active:       "currency_pair.active",
	CreatedAt:    "currency_pair.created_at",
	UpdatedAt:    "currency_pair.updated_at",
}

// Generated where

var CurrencyPairWhere = struct {
	ID           whereHelperint
	BaseID       whereHelperint
	QuoteID      whereHelperint
	KrakenSymbol whereHelperstring
	Active       whereHelperbool
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"currency_pair\".\"id\""},
	BaseID:       whereHelperint{field: "\"currency_pair\".\"base_id\""},
	QuoteID:      whereHelperint{field: "\"currency_pair\".\"quote_id\""},
	KrakenSymbol: whereHelperstring{field: "\"currency_pair\".\"kraken_symbol\""},
	Active:       whereHelperbool{field: "\"currency_pair\".\"active\""},
	CreatedAt:    whereHelpertime_Time{field: "\"currency_pair\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"currency_pair\".\"updated_at\""},
}

// CurrencyPairRels is where relationship names are stored.
var CurrencyPairRels = struct {
	Base  string
	Quote string
}{
	Base:  "Base",
	Quote: "Quote",
}

// currencyPairR is where relationships are stored.
type currencyPairR struct {
	Base  *Currency `boil:"Base" json:"Base" toml:"Base" yaml:"Base"`
	Quote *Currency `boil:"Quote" json:"Quote" toml:"Quote" yaml:"Quote"`
}

// NewStruct creates a new relationship struct
func (*currencyPairR) NewStruct() *currencyPairR {
	return &currencyPairR{}
}

// currencyPairL is where Load methods for each relationship are stored.
type currencyPairL struct{}

var (
	currencyPairAllColumns            = []string{"id", "base_id", "quote_id", "kraken_symbol", "active", "created_at", "updated_at"}
	currencyPairColumnsWithoutDefault = []string{"base_id", "quote_id", "kraken_symbol"}
	currencyPairColumnsWithDefault    = []string{"id", "active", "created_at", "updated_at"}
	currencyPairPrimaryKeyColumns     = []string{"id"}
)

type (
	// CurrencyPairSlice is an alias for a slice of pointers to CurrencyPair.
	// This should almost always be used instead of []CurrencyPair.
	CurrencyPairSlice []*CurrencyPair
	// CurrencyPairHook is the signature for custom CurrencyPair hook methods
	CurrencyPairHook func(context.Context, boil.ContextExecutor, *CurrencyPair) error

	currencyPairQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currencyPairType                 = reflect.TypeOf(&CurrencyPair{})
	currencyPairMapping              = queries.MakeStructMapping(currencyPairType)
	currencyPairPrimaryKeyMapping, _ = queries.BindMapping(currencyPairType, currencyPairMapping, currencyPairPrimaryKeyColumns)
	currencyPairInsertCacheMut       sync.RWMutex
	currencyPairInsertCache          = make(map[string]insertCache)
	currencyPairUpdateCacheMut       sync.RWMutex
	currencyPairUpdateCache          = make(map[string]updateCache)
	currencyPairUpsertCacheMut       sync.RWMutex
	currencyPairUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currencyPairBeforeInsertHooks []CurrencyPairHook
var currencyPairBeforeUpdateHooks []CurrencyPairHook
var currencyPairBeforeDeleteHooks []CurrencyPairHook
var currencyPairBeforeUpsertHooks []CurrencyPairHook

var currencyPairAfterInsertHooks []CurrencyPairHook
var currencyPairAfterSelectHooks []CurrencyPairHook
var currencyPairAfterUpdateHooks []CurrencyPairHook
var currencyPairAfterDeleteHooks []CurrencyPairHook
var currencyPairAfterUpsertHooks []CurrencyPairHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrencyPair) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrencyPair) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrencyPair) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrencyPair) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrencyPair) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrencyPair) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrencyPair) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrencyPair) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrencyPair) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyPairAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrencyPairHook registers your hook function for all future operations.
func AddCurrencyPairHook(hookPoint boil.HookPoint, currencyPairHook CurrencyPairHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currencyPairBeforeInsertHooks = append(currencyPairBeforeInsertHooks, currencyPairHook)
	case boil.BeforeUpdateHook:
		currencyPairBeforeUpdateHooks = append(currencyPairBeforeUpdateHooks, currencyPairHook)
	case boil.BeforeDeleteHook:
		currencyPairBeforeDeleteHooks = append(currencyPairBeforeDeleteHooks, currencyPairHook)
	case boil.BeforeUpsertHook:
		currencyPairBeforeUpsertHooks = append(currencyPairBeforeUpsertHooks, currencyPairHook)
	case boil.AfterInsertHook:
		currencyPairAfterInsertHooks = append(currencyPairAfterInsertHooks, currencyPairHook)
	case boil.AfterSelectHook:
		currencyPairAfterSelectHooks = append(currencyPairAfterSelectHooks, currencyPairHook)
	case boil.AfterUpdateHook:
		currencyPairAfterUpdateHooks = append(currencyPairAfterUpdateHooks, currencyPairHook)
	case boil.AfterDeleteHook:
		currencyPairAfterDeleteHooks = append(currencyPairAfterDeleteHooks, currencyPairHook)
	case boil.AfterUpsertHook:
		currencyPairAfterUpsertHooks = append(currencyPairAfterUpsertHooks, currencyPairHook)
	}
}

// One returns a single currencyPair record from the query.
func (q currencyPairQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurrencyPair, error) {
	o := &CurrencyPair{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: failed to execute a one query for currency_pair")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrencyPair records from the query.
func (q currencyPairQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrencyPairSlice, error) {
	var o []*CurrencyPair

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgres: failed to assign all query results to CurrencyPair slice")
	}

	if len(currencyPairAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrencyPair records in the query.
func (q currencyPairQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to count currency_pair rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currencyPairQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgres: failed to check if currency_pair exists")
	}

	return count > 0, nil
}

// Base pointed to by the foreign key.
func (o *CurrencyPair) Base(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BaseID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
}

// Quote pointed to by the foreign key.
func (o *CurrencyPair) Quote(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QuoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
}

// LoadBase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currencyPairL) LoadBase(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrencyPair interface{}, mods queries.Applicator) error {
	var slice []*CurrencyPair
	var object *CurrencyPair

	if singular {
		object = maybeCurrencyPair.(*CurrencyPair)
	} else {
		slice = *maybeCurrencyPair.(*[]*CurrencyPair)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyPairR{}
		}
		args = append(args, object.BaseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyPairR{}
			}

			for _, a := range args {
				if a == obj.BaseID {
					continue Outer
				}
			}

			args = append(args, obj.BaseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currency`),
		qm.WhereIn(`currency.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currencyPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Base = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.BaseCurrencyPairs = append(foreign.R.BaseCurrencyPairs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BaseID == foreign.ID {
				local.R.Base = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.BaseCurrencyPairs = append(foreign.R.BaseCurrencyPairs, local)
				break
			}
		}
	}

	return nil
}

// LoadQuote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currencyPairL) LoadQuote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrencyPair interface{}, mods queries.Applicator) error {
	var slice []*CurrencyPair
	var object *CurrencyPair

	if singular {
		object = maybeCurrencyPair.(*CurrencyPair)
	} else {
		slice = *maybeCurrencyPair.(*[]*CurrencyPair)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyPairR{}
		}
		args = append(args, object.QuoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyPairR{}
			}

			for _, a := range args {
				if a == obj.QuoteID {
					continue Outer
				}
			}

			args = append(args, obj.QuoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currency`),
		qm.WhereIn(`currency.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currencyPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Quote = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.QuoteCurrencyPairs = append(foreign.R.QuoteCurrencyPairs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuoteID == foreign.ID {
				local.R.Quote = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.QuoteCurrencyPairs = append(foreign.R.QuoteCurrencyPairs, local)
				break
			}
		}
	}

	return nil
}

// SetBase of the currencyPair to the related item.
// Sets o.R.Base to related.
// Adds o to related.R.BaseCurrencyPairs.
func (o *CurrencyPair) SetBase(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"currency_pair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"base_id"}),
		strmangle.WhereClause("\"", "\"", 2, currencyPairPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BaseID = related.ID
	if o.R == nil {
		o.R = &currencyPairR{
			Base: related,
		}
	} else {
		o.R.Base = related
	}

	if related.R == nil {
		related.R = &currencyR{
			BaseCurrencyPairs: CurrencyPairSlice{o},
		}
	} else {
		related.R.BaseCurrencyPairs = append(related.R.BaseCurrencyPairs, o)
	}

	return nil
}

// SetQuote of the currencyPair to the related item.
// Sets o.R.Quote to related.
// Adds o to related.R.QuoteCurrencyPairs.
func (o *CurrencyPair) SetQuote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"currency_pair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"quote_id"}),
		strmangle.WhereClause("\"", "\"", 2, currencyPairPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuoteID = related.ID
	if o.R == nil {
		o.R = &currencyPairR{
			Quote: related,
		}
	} else {
		o.R.Quote = related
	}

	if related.R == nil {
		related.R = &currencyR{
			QuoteCurrencyPairs: CurrencyPairSlice{o},
		}
	} else {
		related.R.QuoteCurrencyPairs = append(related.R.QuoteCurrencyPairs, o)
	}

	return nil
}

// CurrencyPairs retrieves all the records using an executor.
func CurrencyPairs(mods ...qm.QueryMod) currencyPairQuery {
	mods = append(mods, qm.From("\"currency_pair\""))
	return currencyPairQuery{NewQuery(mods...)}
}

// FindCurrencyPair retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrencyPair(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CurrencyPair, error) {
	currencyPairObj := &CurrencyPair{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"currency_pair\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, currencyPairObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: unable to select from currency_pair")
	}

	if err = currencyPairObj.doAfterSelectHooks(ctx, exec); err != nil {
		return currencyPairObj, err
	}

	return currencyPairObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrencyPair) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no currency_pair provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyPairColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currencyPairInsertCacheMut.RLock()
	cache, cached := currencyPairInsertCache[key]
	currencyPairInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currencyPairAllColumns,
			currencyPairColumnsWithDefault,
			currencyPairColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currencyPairType, currencyPairMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currencyPairType, currencyPairMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"currency_pair\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"currency_pair\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgres: unable to insert into currency_pair")
	}

	if !cached {
		currencyPairInsertCacheMut.Lock()
		currencyPairInsertCache[key] = cache
		currencyPairInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CurrencyPair.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrencyPair) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currencyPairUpdateCacheMut.RLock()
	cache, cached := currencyPairUpdateCache[key]
	currencyPairUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currencyPairAllColumns,
			currencyPairPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("postgres: unable to update currency_pair, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"currency_pair\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currencyPairPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currencyPairType, currencyPairMapping, append(wl, currencyPairPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update currency_pair row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by update for currency_pair")
	}

	if !cached {
		currencyPairUpdateCacheMut.Lock()
		currencyPairUpdateCache[key] = cache
		currencyPairUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currencyPairQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all for currency_pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected for currency_pair")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrencyPairSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgres: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"currency_pair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currencyPairPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all in currencyPair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected all in update all currencyPair")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrencyPair) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no currency_pair provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyPairColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currencyPairUpsertCacheMut.RLock()
	cache, cached := currencyPairUpsertCache[key]
	currencyPairUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currencyPairAllColumns,
			currencyPairColumnsWithDefault,
			currencyPairColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			currencyPairAllColumns,
			currencyPairPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgres: unable to upsert currency_pair, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currencyPairPrimaryKeyColumns))
			copy(conflict, currencyPairPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"currency_pair\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currencyPairType, currencyPairMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currencyPairType, currencyPairMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgres: unable to upsert currency_pair")
	}

	if !cached {
		currencyPairUpsertCacheMut.Lock()
		currencyPairUpsertCache[key] = cache
		currencyPairUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CurrencyPair record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrencyPair) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgres: no CurrencyPair provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currencyPairPrimaryKeyMapping)
	sql := "DELETE FROM \"currency_pair\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete from currency_pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by delete for currency_pair")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currencyPairQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgres: no currencyPairQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from currency_pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for currency_pair")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrencyPairSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(currencyPairBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"currency_pair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPairPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from currencyPair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for currency_pair")
	}

	if len(currencyPairAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrencyPair) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrencyPair(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencyPairSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrencyPairSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"currency_pair\".* FROM \"currency_pair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPairPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgres: unable to reload all in CurrencyPairSlice")
	}

	*o = slice

	return nil
}

// CurrencyPairExists checks if the CurrencyPair row exists.
func CurrencyPairExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"currency_pair\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgres: unable to check if currency_pair exists")
	}

	return exists, nil
}
