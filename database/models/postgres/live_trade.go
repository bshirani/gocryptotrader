// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LiveTrade is an object representing the database table.
type LiveTrade struct {
	ID               int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Side             string       `boil:"side" json:"side" toml:"side" yaml:"side"`
	EntryOrderID     string       `boil:"entry_order_id" json:"entry_order_id" toml:"entry_order_id" yaml:"entry_order_id"`
	EntryPrice       float64      `boil:"entry_price" json:"entry_price" toml:"entry_price" yaml:"entry_price"`
	EntryTime        time.Time    `boil:"entry_time" json:"entry_time" toml:"entry_time" yaml:"entry_time"`
	StopLossPrice    float64      `boil:"stop_loss_price" json:"stop_loss_price" toml:"stop_loss_price" yaml:"stop_loss_price"`
	StrategyID       string       `boil:"strategy_id" json:"strategy_id" toml:"strategy_id" yaml:"strategy_id"`
	Status           string       `boil:"status" json:"status" toml:"status" yaml:"status"`
	Pair             string       `boil:"pair" json:"pair" toml:"pair" yaml:"pair"`
	ExitTime         null.Time    `boil:"exit_time" json:"exit_time,omitempty" toml:"exit_time" yaml:"exit_time,omitempty"`
	TakeProfitPrice  null.Float32 `boil:"take_profit_price" json:"take_profit_price,omitempty" toml:"take_profit_price" yaml:"take_profit_price,omitempty"`
	ProfitLossPoints null.Float32 `boil:"profit_loss_points" json:"profit_loss_points,omitempty" toml:"profit_loss_points" yaml:"profit_loss_points,omitempty"`
	ExitPrice        null.Float64 `boil:"exit_price" json:"exit_price,omitempty" toml:"exit_price" yaml:"exit_price,omitempty"`
	CreatedAt        time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Amount           float64      `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`

	R *liveTradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L liveTradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LiveTradeColumns = struct {
	ID               string
	Side             string
	EntryOrderID     string
	EntryPrice       string
	EntryTime        string
	StopLossPrice    string
	StrategyID       string
	Status           string
	Pair             string
	ExitTime         string
	TakeProfitPrice  string
	ProfitLossPoints string
	ExitPrice        string
	CreatedAt        string
	UpdatedAt        string
	Amount           string
}{
	ID:               "id",
	Side:             "side",
	EntryOrderID:     "entry_order_id",
	EntryPrice:       "entry_price",
	EntryTime:        "entry_time",
	StopLossPrice:    "stop_loss_price",
	StrategyID:       "strategy_id",
	Status:           "status",
	Pair:             "pair",
	ExitTime:         "exit_time",
	TakeProfitPrice:  "take_profit_price",
	ProfitLossPoints: "profit_loss_points",
	ExitPrice:        "exit_price",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	Amount:           "amount",
}

var LiveTradeTableColumns = struct {
	ID               string
	Side             string
	EntryOrderID     string
	EntryPrice       string
	EntryTime        string
	StopLossPrice    string
	StrategyID       string
	Status           string
	Pair             string
	ExitTime         string
	TakeProfitPrice  string
	ProfitLossPoints string
	ExitPrice        string
	CreatedAt        string
	UpdatedAt        string
	Amount           string
}{
	ID:               "live_trade.id",
	Side:             "live_trade.side",
	EntryOrderID:     "live_trade.entry_order_id",
	EntryPrice:       "live_trade.entry_price",
	EntryTime:        "live_trade.entry_time",
	StopLossPrice:    "live_trade.stop_loss_price",
	StrategyID:       "live_trade.strategy_id",
	Status:           "live_trade.status",
	Pair:             "live_trade.pair",
	ExitTime:         "live_trade.exit_time",
	TakeProfitPrice:  "live_trade.take_profit_price",
	ProfitLossPoints: "live_trade.profit_loss_points",
	ExitPrice:        "live_trade.exit_price",
	CreatedAt:        "live_trade.created_at",
	UpdatedAt:        "live_trade.updated_at",
	Amount:           "live_trade.amount",
}

// Generated where

var LiveTradeWhere = struct {
	ID               whereHelperint
	Side             whereHelperstring
	EntryOrderID     whereHelperstring
	EntryPrice       whereHelperfloat64
	EntryTime        whereHelpertime_Time
	StopLossPrice    whereHelperfloat64
	StrategyID       whereHelperstring
	Status           whereHelperstring
	Pair             whereHelperstring
	ExitTime         whereHelpernull_Time
	TakeProfitPrice  whereHelpernull_Float32
	ProfitLossPoints whereHelpernull_Float32
	ExitPrice        whereHelpernull_Float64
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	Amount           whereHelperfloat64
}{
	ID:               whereHelperint{field: "\"live_trade\".\"id\""},
	Side:             whereHelperstring{field: "\"live_trade\".\"side\""},
	EntryOrderID:     whereHelperstring{field: "\"live_trade\".\"entry_order_id\""},
	EntryPrice:       whereHelperfloat64{field: "\"live_trade\".\"entry_price\""},
	EntryTime:        whereHelpertime_Time{field: "\"live_trade\".\"entry_time\""},
	StopLossPrice:    whereHelperfloat64{field: "\"live_trade\".\"stop_loss_price\""},
	StrategyID:       whereHelperstring{field: "\"live_trade\".\"strategy_id\""},
	Status:           whereHelperstring{field: "\"live_trade\".\"status\""},
	Pair:             whereHelperstring{field: "\"live_trade\".\"pair\""},
	ExitTime:         whereHelpernull_Time{field: "\"live_trade\".\"exit_time\""},
	TakeProfitPrice:  whereHelpernull_Float32{field: "\"live_trade\".\"take_profit_price\""},
	ProfitLossPoints: whereHelpernull_Float32{field: "\"live_trade\".\"profit_loss_points\""},
	ExitPrice:        whereHelpernull_Float64{field: "\"live_trade\".\"exit_price\""},
	CreatedAt:        whereHelpertime_Time{field: "\"live_trade\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"live_trade\".\"updated_at\""},
	Amount:           whereHelperfloat64{field: "\"live_trade\".\"amount\""},
}

// LiveTradeRels is where relationship names are stored.
var LiveTradeRels = struct {
	EntryOrder string
}{
	EntryOrder: "EntryOrder",
}

// liveTradeR is where relationships are stored.
type liveTradeR struct {
	EntryOrder *LiveOrder `boil:"EntryOrder" json:"EntryOrder" toml:"EntryOrder" yaml:"EntryOrder"`
}

// NewStruct creates a new relationship struct
func (*liveTradeR) NewStruct() *liveTradeR {
	return &liveTradeR{}
}

// liveTradeL is where Load methods for each relationship are stored.
type liveTradeL struct{}

var (
	liveTradeAllColumns            = []string{"id", "side", "entry_order_id", "entry_price", "entry_time", "stop_loss_price", "strategy_id", "status", "pair", "exit_time", "take_profit_price", "profit_loss_points", "exit_price", "created_at", "updated_at", "amount"}
	liveTradeColumnsWithoutDefault = []string{"side", "entry_order_id", "entry_price", "entry_time", "stop_loss_price", "strategy_id", "status", "pair", "exit_time", "take_profit_price", "profit_loss_points", "exit_price"}
	liveTradeColumnsWithDefault    = []string{"id", "created_at", "updated_at", "amount"}
	liveTradePrimaryKeyColumns     = []string{"id"}
)

type (
	// LiveTradeSlice is an alias for a slice of pointers to LiveTrade.
	// This should almost always be used instead of []LiveTrade.
	LiveTradeSlice []*LiveTrade
	// LiveTradeHook is the signature for custom LiveTrade hook methods
	LiveTradeHook func(context.Context, boil.ContextExecutor, *LiveTrade) error

	liveTradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	liveTradeType                 = reflect.TypeOf(&LiveTrade{})
	liveTradeMapping              = queries.MakeStructMapping(liveTradeType)
	liveTradePrimaryKeyMapping, _ = queries.BindMapping(liveTradeType, liveTradeMapping, liveTradePrimaryKeyColumns)
	liveTradeInsertCacheMut       sync.RWMutex
	liveTradeInsertCache          = make(map[string]insertCache)
	liveTradeUpdateCacheMut       sync.RWMutex
	liveTradeUpdateCache          = make(map[string]updateCache)
	liveTradeUpsertCacheMut       sync.RWMutex
	liveTradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var liveTradeBeforeInsertHooks []LiveTradeHook
var liveTradeBeforeUpdateHooks []LiveTradeHook
var liveTradeBeforeDeleteHooks []LiveTradeHook
var liveTradeBeforeUpsertHooks []LiveTradeHook

var liveTradeAfterInsertHooks []LiveTradeHook
var liveTradeAfterSelectHooks []LiveTradeHook
var liveTradeAfterUpdateHooks []LiveTradeHook
var liveTradeAfterDeleteHooks []LiveTradeHook
var liveTradeAfterUpsertHooks []LiveTradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LiveTrade) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LiveTrade) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LiveTrade) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LiveTrade) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LiveTrade) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LiveTrade) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LiveTrade) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LiveTrade) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LiveTrade) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLiveTradeHook registers your hook function for all future operations.
func AddLiveTradeHook(hookPoint boil.HookPoint, liveTradeHook LiveTradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		liveTradeBeforeInsertHooks = append(liveTradeBeforeInsertHooks, liveTradeHook)
	case boil.BeforeUpdateHook:
		liveTradeBeforeUpdateHooks = append(liveTradeBeforeUpdateHooks, liveTradeHook)
	case boil.BeforeDeleteHook:
		liveTradeBeforeDeleteHooks = append(liveTradeBeforeDeleteHooks, liveTradeHook)
	case boil.BeforeUpsertHook:
		liveTradeBeforeUpsertHooks = append(liveTradeBeforeUpsertHooks, liveTradeHook)
	case boil.AfterInsertHook:
		liveTradeAfterInsertHooks = append(liveTradeAfterInsertHooks, liveTradeHook)
	case boil.AfterSelectHook:
		liveTradeAfterSelectHooks = append(liveTradeAfterSelectHooks, liveTradeHook)
	case boil.AfterUpdateHook:
		liveTradeAfterUpdateHooks = append(liveTradeAfterUpdateHooks, liveTradeHook)
	case boil.AfterDeleteHook:
		liveTradeAfterDeleteHooks = append(liveTradeAfterDeleteHooks, liveTradeHook)
	case boil.AfterUpsertHook:
		liveTradeAfterUpsertHooks = append(liveTradeAfterUpsertHooks, liveTradeHook)
	}
}

// One returns a single liveTrade record from the query.
func (q liveTradeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LiveTrade, error) {
	o := &LiveTrade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: failed to execute a one query for live_trade")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LiveTrade records from the query.
func (q liveTradeQuery) All(ctx context.Context, exec boil.ContextExecutor) (LiveTradeSlice, error) {
	var o []*LiveTrade

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgres: failed to assign all query results to LiveTrade slice")
	}

	if len(liveTradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LiveTrade records in the query.
func (q liveTradeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to count live_trade rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q liveTradeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgres: failed to check if live_trade exists")
	}

	return count > 0, nil
}

// EntryOrder pointed to by the foreign key.
func (o *LiveTrade) EntryOrder(mods ...qm.QueryMod) liveOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EntryOrderID),
	}

	queryMods = append(queryMods, mods...)

	query := LiveOrders(queryMods...)
	queries.SetFrom(query.Query, "\"live_order\"")

	return query
}

// LoadEntryOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (liveTradeL) LoadEntryOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLiveTrade interface{}, mods queries.Applicator) error {
	var slice []*LiveTrade
	var object *LiveTrade

	if singular {
		object = maybeLiveTrade.(*LiveTrade)
	} else {
		slice = *maybeLiveTrade.(*[]*LiveTrade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &liveTradeR{}
		}
		args = append(args, object.EntryOrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &liveTradeR{}
			}

			for _, a := range args {
				if a == obj.EntryOrderID {
					continue Outer
				}
			}

			args = append(args, obj.EntryOrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`live_order`),
		qm.WhereIn(`live_order.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LiveOrder")
	}

	var resultSlice []*LiveOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LiveOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for live_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for live_order")
	}

	if len(liveTradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EntryOrder = foreign
		if foreign.R == nil {
			foreign.R = &liveOrderR{}
		}
		foreign.R.EntryOrderLiveTrades = append(foreign.R.EntryOrderLiveTrades, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EntryOrderID == foreign.ID {
				local.R.EntryOrder = foreign
				if foreign.R == nil {
					foreign.R = &liveOrderR{}
				}
				foreign.R.EntryOrderLiveTrades = append(foreign.R.EntryOrderLiveTrades, local)
				break
			}
		}
	}

	return nil
}

// SetEntryOrder of the liveTrade to the related item.
// Sets o.R.EntryOrder to related.
// Adds o to related.R.EntryOrderLiveTrades.
func (o *LiveTrade) SetEntryOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LiveOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"live_trade\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"entry_order_id"}),
		strmangle.WhereClause("\"", "\"", 2, liveTradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EntryOrderID = related.ID
	if o.R == nil {
		o.R = &liveTradeR{
			EntryOrder: related,
		}
	} else {
		o.R.EntryOrder = related
	}

	if related.R == nil {
		related.R = &liveOrderR{
			EntryOrderLiveTrades: LiveTradeSlice{o},
		}
	} else {
		related.R.EntryOrderLiveTrades = append(related.R.EntryOrderLiveTrades, o)
	}

	return nil
}

// LiveTrades retrieves all the records using an executor.
func LiveTrades(mods ...qm.QueryMod) liveTradeQuery {
	mods = append(mods, qm.From("\"live_trade\""))
	return liveTradeQuery{NewQuery(mods...)}
}

// FindLiveTrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLiveTrade(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*LiveTrade, error) {
	liveTradeObj := &LiveTrade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"live_trade\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, liveTradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: unable to select from live_trade")
	}

	if err = liveTradeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return liveTradeObj, err
	}

	return liveTradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LiveTrade) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no live_trade provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(liveTradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	liveTradeInsertCacheMut.RLock()
	cache, cached := liveTradeInsertCache[key]
	liveTradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			liveTradeAllColumns,
			liveTradeColumnsWithDefault,
			liveTradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"live_trade\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"live_trade\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgres: unable to insert into live_trade")
	}

	if !cached {
		liveTradeInsertCacheMut.Lock()
		liveTradeInsertCache[key] = cache
		liveTradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LiveTrade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LiveTrade) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	liveTradeUpdateCacheMut.RLock()
	cache, cached := liveTradeUpdateCache[key]
	liveTradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			liveTradeAllColumns,
			liveTradePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("postgres: unable to update live_trade, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"live_trade\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, liveTradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, append(wl, liveTradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update live_trade row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by update for live_trade")
	}

	if !cached {
		liveTradeUpdateCacheMut.Lock()
		liveTradeUpdateCache[key] = cache
		liveTradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q liveTradeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all for live_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected for live_trade")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LiveTradeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgres: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"live_trade\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, liveTradePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all in liveTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected all in update all liveTrade")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LiveTrade) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no live_trade provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(liveTradeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	liveTradeUpsertCacheMut.RLock()
	cache, cached := liveTradeUpsertCache[key]
	liveTradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			liveTradeAllColumns,
			liveTradeColumnsWithDefault,
			liveTradeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			liveTradeAllColumns,
			liveTradePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgres: unable to upsert live_trade, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(liveTradePrimaryKeyColumns))
			copy(conflict, liveTradePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"live_trade\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgres: unable to upsert live_trade")
	}

	if !cached {
		liveTradeUpsertCacheMut.Lock()
		liveTradeUpsertCache[key] = cache
		liveTradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LiveTrade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LiveTrade) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgres: no LiveTrade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), liveTradePrimaryKeyMapping)
	sql := "DELETE FROM \"live_trade\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete from live_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by delete for live_trade")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q liveTradeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgres: no liveTradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from live_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for live_trade")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LiveTradeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(liveTradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"live_trade\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, liveTradePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from liveTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for live_trade")
	}

	if len(liveTradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LiveTrade) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLiveTrade(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LiveTradeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LiveTradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"live_trade\".* FROM \"live_trade\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, liveTradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgres: unable to reload all in LiveTradeSlice")
	}

	*o = slice

	return nil
}

// LiveTradeExists checks if the LiveTrade row exists.
func LiveTradeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"live_trade\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgres: unable to check if live_trade exists")
	}

	return exists, nil
}
