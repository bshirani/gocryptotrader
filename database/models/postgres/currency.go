// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Currency is an object representing the database table.
type Currency struct {
	ID                  int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	Symbol              string            `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	CMCID               int               `boil:"cmc_id" json:"cmc_id" toml:"cmc_id" yaml:"cmc_id"`
	Name                string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug                string            `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	FirstHistoricalData time.Time         `boil:"first_historical_data" json:"first_historical_data" toml:"first_historical_data" yaml:"first_historical_data"`
	LastHistoricalData  time.Time         `boil:"last_historical_data" json:"last_historical_data" toml:"last_historical_data" yaml:"last_historical_data"`
	MarketCap           types.NullDecimal `boil:"market_cap" json:"market_cap,omitempty" toml:"market_cap" yaml:"market_cap,omitempty"`
	Active              bool              `boil:"active" json:"active" toml:"active" yaml:"active"`
	Status              bool              `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt           time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	KrakenSymbol        null.String       `boil:"kraken_symbol" json:"kraken_symbol,omitempty" toml:"kraken_symbol" yaml:"kraken_symbol,omitempty"`
	KrakenActive        bool              `boil:"kraken_active" json:"kraken_active" toml:"kraken_active" yaml:"kraken_active"`

	R *currencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrencyColumns = struct {
	ID                  string
	Symbol              string
	CMCID               string
	Name                string
	Slug                string
	FirstHistoricalData string
	LastHistoricalData  string
	MarketCap           string
	Active              string
	Status              string
	CreatedAt           string
	UpdatedAt           string
	KrakenSymbol        string
	KrakenActive        string
}{
	ID:                  "id",
	Symbol:              "symbol",
	CMCID:               "cmc_id",
	Name:                "name",
	Slug:                "slug",
	FirstHistoricalData: "first_historical_data",
	LastHistoricalData:  "last_historical_data",
	MarketCap:           "market_cap",
	Active:              "active",
	Status:              "status",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	KrakenSymbol:        "kraken_symbol",
	KrakenActive:        "kraken_active",
}

var CurrencyTableColumns = struct {
	ID                  string
	Symbol              string
	CMCID               string
	Name                string
	Slug                string
	FirstHistoricalData string
	LastHistoricalData  string
	MarketCap           string
	Active              string
	Status              string
	CreatedAt           string
	UpdatedAt           string
	KrakenSymbol        string
	KrakenActive        string
}{
	ID:                  "currency.id",
	Symbol:              "currency.symbol",
	CMCID:               "currency.cmc_id",
	Name:                "currency.name",
	Slug:                "currency.slug",
	FirstHistoricalData: "currency.first_historical_data",
	LastHistoricalData:  "currency.last_historical_data",
	MarketCap:           "currency.market_cap",
	Active:              "currency.active",
	Status:              "currency.status",
	CreatedAt:           "currency.created_at",
	UpdatedAt:           "currency.updated_at",
	KrakenSymbol:        "currency.kraken_symbol",
	KrakenActive:        "currency.kraken_active",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var CurrencyWhere = struct {
	ID                  whereHelperint
	Symbol              whereHelperstring
	CMCID               whereHelperint
	Name                whereHelperstring
	Slug                whereHelperstring
	FirstHistoricalData whereHelpertime_Time
	LastHistoricalData  whereHelpertime_Time
	MarketCap           whereHelpertypes_NullDecimal
	Active              whereHelperbool
	Status              whereHelperbool
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	KrakenSymbol        whereHelpernull_String
	KrakenActive        whereHelperbool
}{
	ID:                  whereHelperint{field: "\"currency\".\"id\""},
	Symbol:              whereHelperstring{field: "\"currency\".\"symbol\""},
	CMCID:               whereHelperint{field: "\"currency\".\"cmc_id\""},
	Name:                whereHelperstring{field: "\"currency\".\"name\""},
	Slug:                whereHelperstring{field: "\"currency\".\"slug\""},
	FirstHistoricalData: whereHelpertime_Time{field: "\"currency\".\"first_historical_data\""},
	LastHistoricalData:  whereHelpertime_Time{field: "\"currency\".\"last_historical_data\""},
	MarketCap:           whereHelpertypes_NullDecimal{field: "\"currency\".\"market_cap\""},
	Active:              whereHelperbool{field: "\"currency\".\"active\""},
	Status:              whereHelperbool{field: "\"currency\".\"status\""},
	CreatedAt:           whereHelpertime_Time{field: "\"currency\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"currency\".\"updated_at\""},
	KrakenSymbol:        whereHelpernull_String{field: "\"currency\".\"kraken_symbol\""},
	KrakenActive:        whereHelperbool{field: "\"currency\".\"kraken_active\""},
}

// CurrencyRels is where relationship names are stored.
var CurrencyRels = struct {
	BaseCurrencyPairs                  string
	QuoteCurrencyPairs                 string
	CurrencyPairCurrencyPairStrategies string
}{
	BaseCurrencyPairs:                  "BaseCurrencyPairs",
	QuoteCurrencyPairs:                 "QuoteCurrencyPairs",
	CurrencyPairCurrencyPairStrategies: "CurrencyPairCurrencyPairStrategies",
}

// currencyR is where relationships are stored.
type currencyR struct {
	BaseCurrencyPairs                  CurrencyPairSlice         `boil:"BaseCurrencyPairs" json:"BaseCurrencyPairs" toml:"BaseCurrencyPairs" yaml:"BaseCurrencyPairs"`
	QuoteCurrencyPairs                 CurrencyPairSlice         `boil:"QuoteCurrencyPairs" json:"QuoteCurrencyPairs" toml:"QuoteCurrencyPairs" yaml:"QuoteCurrencyPairs"`
	CurrencyPairCurrencyPairStrategies CurrencyPairStrategySlice `boil:"CurrencyPairCurrencyPairStrategies" json:"CurrencyPairCurrencyPairStrategies" toml:"CurrencyPairCurrencyPairStrategies" yaml:"CurrencyPairCurrencyPairStrategies"`
}

// NewStruct creates a new relationship struct
func (*currencyR) NewStruct() *currencyR {
	return &currencyR{}
}

// currencyL is where Load methods for each relationship are stored.
type currencyL struct{}

var (
	currencyAllColumns            = []string{"id", "symbol", "cmc_id", "name", "slug", "first_historical_data", "last_historical_data", "market_cap", "active", "status", "created_at", "updated_at", "kraken_symbol", "kraken_active"}
	currencyColumnsWithoutDefault = []string{"symbol", "cmc_id", "name", "slug", "first_historical_data", "last_historical_data", "market_cap", "active", "status", "kraken_symbol"}
	currencyColumnsWithDefault    = []string{"id", "created_at", "updated_at", "kraken_active"}
	currencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CurrencySlice is an alias for a slice of pointers to Currency.
	// This should almost always be used instead of []Currency.
	CurrencySlice []*Currency
	// CurrencyHook is the signature for custom Currency hook methods
	CurrencyHook func(context.Context, boil.ContextExecutor, *Currency) error

	currencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currencyType                 = reflect.TypeOf(&Currency{})
	currencyMapping              = queries.MakeStructMapping(currencyType)
	currencyPrimaryKeyMapping, _ = queries.BindMapping(currencyType, currencyMapping, currencyPrimaryKeyColumns)
	currencyInsertCacheMut       sync.RWMutex
	currencyInsertCache          = make(map[string]insertCache)
	currencyUpdateCacheMut       sync.RWMutex
	currencyUpdateCache          = make(map[string]updateCache)
	currencyUpsertCacheMut       sync.RWMutex
	currencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currencyBeforeInsertHooks []CurrencyHook
var currencyBeforeUpdateHooks []CurrencyHook
var currencyBeforeDeleteHooks []CurrencyHook
var currencyBeforeUpsertHooks []CurrencyHook

var currencyAfterInsertHooks []CurrencyHook
var currencyAfterSelectHooks []CurrencyHook
var currencyAfterUpdateHooks []CurrencyHook
var currencyAfterDeleteHooks []CurrencyHook
var currencyAfterUpsertHooks []CurrencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Currency) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Currency) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Currency) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Currency) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Currency) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Currency) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Currency) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Currency) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Currency) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrencyHook registers your hook function for all future operations.
func AddCurrencyHook(hookPoint boil.HookPoint, currencyHook CurrencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currencyBeforeInsertHooks = append(currencyBeforeInsertHooks, currencyHook)
	case boil.BeforeUpdateHook:
		currencyBeforeUpdateHooks = append(currencyBeforeUpdateHooks, currencyHook)
	case boil.BeforeDeleteHook:
		currencyBeforeDeleteHooks = append(currencyBeforeDeleteHooks, currencyHook)
	case boil.BeforeUpsertHook:
		currencyBeforeUpsertHooks = append(currencyBeforeUpsertHooks, currencyHook)
	case boil.AfterInsertHook:
		currencyAfterInsertHooks = append(currencyAfterInsertHooks, currencyHook)
	case boil.AfterSelectHook:
		currencyAfterSelectHooks = append(currencyAfterSelectHooks, currencyHook)
	case boil.AfterUpdateHook:
		currencyAfterUpdateHooks = append(currencyAfterUpdateHooks, currencyHook)
	case boil.AfterDeleteHook:
		currencyAfterDeleteHooks = append(currencyAfterDeleteHooks, currencyHook)
	case boil.AfterUpsertHook:
		currencyAfterUpsertHooks = append(currencyAfterUpsertHooks, currencyHook)
	}
}

// One returns a single currency record from the query.
func (q currencyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Currency, error) {
	o := &Currency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: failed to execute a one query for currency")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Currency records from the query.
func (q currencyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrencySlice, error) {
	var o []*Currency

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgres: failed to assign all query results to Currency slice")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Currency records in the query.
func (q currencyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to count currency rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currencyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgres: failed to check if currency exists")
	}

	return count > 0, nil
}

// BaseCurrencyPairs retrieves all the currency_pair's CurrencyPairs with an executor via base_id column.
func (o *Currency) BaseCurrencyPairs(mods ...qm.QueryMod) currencyPairQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"currency_pair\".\"base_id\"=?", o.ID),
	)

	query := CurrencyPairs(queryMods...)
	queries.SetFrom(query.Query, "\"currency_pair\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"currency_pair\".*"})
	}

	return query
}

// QuoteCurrencyPairs retrieves all the currency_pair's CurrencyPairs with an executor via quote_id column.
func (o *Currency) QuoteCurrencyPairs(mods ...qm.QueryMod) currencyPairQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"currency_pair\".\"quote_id\"=?", o.ID),
	)

	query := CurrencyPairs(queryMods...)
	queries.SetFrom(query.Query, "\"currency_pair\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"currency_pair\".*"})
	}

	return query
}

// CurrencyPairCurrencyPairStrategies retrieves all the currency_pair_strategy's CurrencyPairStrategies with an executor via currency_pair_id column.
func (o *Currency) CurrencyPairCurrencyPairStrategies(mods ...qm.QueryMod) currencyPairStrategyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"currency_pair_strategy\".\"currency_pair_id\"=?", o.ID),
	)

	query := CurrencyPairStrategies(queryMods...)
	queries.SetFrom(query.Query, "\"currency_pair_strategy\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"currency_pair_strategy\".*"})
	}

	return query
}

// LoadBaseCurrencyPairs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadBaseCurrencyPairs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currency_pair`),
		qm.WhereIn(`currency_pair.base_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load currency_pair")
	}

	var resultSlice []*CurrencyPair
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice currency_pair")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on currency_pair")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency_pair")
	}

	if len(currencyPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaseCurrencyPairs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currencyPairR{}
			}
			foreign.R.Base = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BaseID {
				local.R.BaseCurrencyPairs = append(local.R.BaseCurrencyPairs, foreign)
				if foreign.R == nil {
					foreign.R = &currencyPairR{}
				}
				foreign.R.Base = local
				break
			}
		}
	}

	return nil
}

// LoadQuoteCurrencyPairs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadQuoteCurrencyPairs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currency_pair`),
		qm.WhereIn(`currency_pair.quote_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load currency_pair")
	}

	var resultSlice []*CurrencyPair
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice currency_pair")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on currency_pair")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency_pair")
	}

	if len(currencyPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuoteCurrencyPairs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currencyPairR{}
			}
			foreign.R.Quote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.QuoteID {
				local.R.QuoteCurrencyPairs = append(local.R.QuoteCurrencyPairs, foreign)
				if foreign.R == nil {
					foreign.R = &currencyPairR{}
				}
				foreign.R.Quote = local
				break
			}
		}
	}

	return nil
}

// LoadCurrencyPairCurrencyPairStrategies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadCurrencyPairCurrencyPairStrategies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currency_pair_strategy`),
		qm.WhereIn(`currency_pair_strategy.currency_pair_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load currency_pair_strategy")
	}

	var resultSlice []*CurrencyPairStrategy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice currency_pair_strategy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on currency_pair_strategy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency_pair_strategy")
	}

	if len(currencyPairStrategyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurrencyPairCurrencyPairStrategies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currencyPairStrategyR{}
			}
			foreign.R.CurrencyPair = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CurrencyPairID {
				local.R.CurrencyPairCurrencyPairStrategies = append(local.R.CurrencyPairCurrencyPairStrategies, foreign)
				if foreign.R == nil {
					foreign.R = &currencyPairStrategyR{}
				}
				foreign.R.CurrencyPair = local
				break
			}
		}
	}

	return nil
}

// AddBaseCurrencyPairs adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.BaseCurrencyPairs.
// Sets related.R.Base appropriately.
func (o *Currency) AddBaseCurrencyPairs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurrencyPair) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"currency_pair\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"base_id"}),
				strmangle.WhereClause("\"", "\"", 2, currencyPairPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			BaseCurrencyPairs: related,
		}
	} else {
		o.R.BaseCurrencyPairs = append(o.R.BaseCurrencyPairs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currencyPairR{
				Base: o,
			}
		} else {
			rel.R.Base = o
		}
	}
	return nil
}

// AddQuoteCurrencyPairs adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.QuoteCurrencyPairs.
// Sets related.R.Quote appropriately.
func (o *Currency) AddQuoteCurrencyPairs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurrencyPair) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuoteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"currency_pair\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"quote_id"}),
				strmangle.WhereClause("\"", "\"", 2, currencyPairPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			QuoteCurrencyPairs: related,
		}
	} else {
		o.R.QuoteCurrencyPairs = append(o.R.QuoteCurrencyPairs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currencyPairR{
				Quote: o,
			}
		} else {
			rel.R.Quote = o
		}
	}
	return nil
}

// AddCurrencyPairCurrencyPairStrategies adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.CurrencyPairCurrencyPairStrategies.
// Sets related.R.CurrencyPair appropriately.
func (o *Currency) AddCurrencyPairCurrencyPairStrategies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurrencyPairStrategy) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurrencyPairID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"currency_pair_strategy\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"currency_pair_id"}),
				strmangle.WhereClause("\"", "\"", 2, currencyPairStrategyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurrencyPairID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			CurrencyPairCurrencyPairStrategies: related,
		}
	} else {
		o.R.CurrencyPairCurrencyPairStrategies = append(o.R.CurrencyPairCurrencyPairStrategies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currencyPairStrategyR{
				CurrencyPair: o,
			}
		} else {
			rel.R.CurrencyPair = o
		}
	}
	return nil
}

// Currencies retrieves all the records using an executor.
func Currencies(mods ...qm.QueryMod) currencyQuery {
	mods = append(mods, qm.From("\"currency\""))
	return currencyQuery{NewQuery(mods...)}
}

// FindCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrency(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Currency, error) {
	currencyObj := &Currency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"currency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, currencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: unable to select from currency")
	}

	if err = currencyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return currencyObj, err
	}

	return currencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Currency) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no currency provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currencyInsertCacheMut.RLock()
	cache, cached := currencyInsertCache[key]
	currencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currencyAllColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"currency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgres: unable to insert into currency")
	}

	if !cached {
		currencyInsertCacheMut.Lock()
		currencyInsertCache[key] = cache
		currencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Currency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Currency) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currencyUpdateCacheMut.RLock()
	cache, cached := currencyUpdateCache[key]
	currencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currencyAllColumns,
			currencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("postgres: unable to update currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, append(wl, currencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update currency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by update for currency")
	}

	if !cached {
		currencyUpdateCacheMut.Lock()
		currencyUpdateCache[key] = cache
		currencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currencyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all for currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected for currency")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrencySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgres: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currencyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all in currency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected all in update all currency")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Currency) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no currency provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currencyUpsertCacheMut.RLock()
	cache, cached := currencyUpsertCache[key]
	currencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currencyAllColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			currencyAllColumns,
			currencyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgres: unable to upsert currency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currencyPrimaryKeyColumns))
			copy(conflict, currencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"currency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgres: unable to upsert currency")
	}

	if !cached {
		currencyUpsertCacheMut.Lock()
		currencyUpsertCache[key] = cache
		currencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Currency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Currency) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgres: no Currency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currencyPrimaryKeyMapping)
	sql := "DELETE FROM \"currency\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete from currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by delete for currency")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currencyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgres: no currencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for currency")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrencySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(currencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from currency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for currency")
	}

	if len(currencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Currency) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrency(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"currency\".* FROM \"currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgres: unable to reload all in CurrencySlice")
	}

	*o = slice

	return nil
}

// CurrencyExists checks if the Currency row exists.
func CurrencyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"currency\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgres: unable to check if currency exists")
	}

	return exists, nil
}
