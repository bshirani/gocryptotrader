// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClosedTrade is an object representing the database table.
type ClosedTrade struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Side             string    `boil:"side" json:"side" toml:"side" yaml:"side"`
	EntryOrderID     string    `boil:"entry_order_id" json:"entry_order_id" toml:"entry_order_id" yaml:"entry_order_id"`
	EntryPrice       float64   `boil:"entry_price" json:"entry_price" toml:"entry_price" yaml:"entry_price"`
	EntryTime        time.Time `boil:"entry_time" json:"entry_time" toml:"entry_time" yaml:"entry_time"`
	StopLossPrice    float64   `boil:"stop_loss_price" json:"stop_loss_price" toml:"stop_loss_price" yaml:"stop_loss_price"`
	StrategyID       string    `boil:"strategy_id" json:"strategy_id" toml:"strategy_id" yaml:"strategy_id"`
	Status           string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Pair             string    `boil:"pair" json:"pair" toml:"pair" yaml:"pair"`
	ExitTime         time.Time `boil:"exit_time" json:"exit_time" toml:"exit_time" yaml:"exit_time"`
	TakeProfitPrice  float32   `boil:"take_profit_price" json:"take_profit_price" toml:"take_profit_price" yaml:"take_profit_price"`
	ProfitLossPoints float32   `boil:"profit_loss_points" json:"profit_loss_points" toml:"profit_loss_points" yaml:"profit_loss_points"`
	ExitPrice        float64   `boil:"exit_price" json:"exit_price" toml:"exit_price" yaml:"exit_price"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *closedTradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L closedTradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClosedTradeColumns = struct {
	ID               string
	Side             string
	EntryOrderID     string
	EntryPrice       string
	EntryTime        string
	StopLossPrice    string
	StrategyID       string
	Status           string
	Pair             string
	ExitTime         string
	TakeProfitPrice  string
	ProfitLossPoints string
	ExitPrice        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	Side:             "side",
	EntryOrderID:     "entry_order_id",
	EntryPrice:       "entry_price",
	EntryTime:        "entry_time",
	StopLossPrice:    "stop_loss_price",
	StrategyID:       "strategy_id",
	Status:           "status",
	Pair:             "pair",
	ExitTime:         "exit_time",
	TakeProfitPrice:  "take_profit_price",
	ProfitLossPoints: "profit_loss_points",
	ExitPrice:        "exit_price",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var ClosedTradeTableColumns = struct {
	ID               string
	Side             string
	EntryOrderID     string
	EntryPrice       string
	EntryTime        string
	StopLossPrice    string
	StrategyID       string
	Status           string
	Pair             string
	ExitTime         string
	TakeProfitPrice  string
	ProfitLossPoints string
	ExitPrice        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "closed_trade.id",
	Side:             "closed_trade.side",
	EntryOrderID:     "closed_trade.entry_order_id",
	EntryPrice:       "closed_trade.entry_price",
	EntryTime:        "closed_trade.entry_time",
	StopLossPrice:    "closed_trade.stop_loss_price",
	StrategyID:       "closed_trade.strategy_id",
	Status:           "closed_trade.status",
	Pair:             "closed_trade.pair",
	ExitTime:         "closed_trade.exit_time",
	TakeProfitPrice:  "closed_trade.take_profit_price",
	ProfitLossPoints: "closed_trade.profit_loss_points",
	ExitPrice:        "closed_trade.exit_price",
	CreatedAt:        "closed_trade.created_at",
	UpdatedAt:        "closed_trade.updated_at",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ClosedTradeWhere = struct {
	ID               whereHelperint
	Side             whereHelperstring
	EntryOrderID     whereHelperstring
	EntryPrice       whereHelperfloat64
	EntryTime        whereHelpertime_Time
	StopLossPrice    whereHelperfloat64
	StrategyID       whereHelperstring
	Status           whereHelperstring
	Pair             whereHelperstring
	ExitTime         whereHelpertime_Time
	TakeProfitPrice  whereHelperfloat32
	ProfitLossPoints whereHelperfloat32
	ExitPrice        whereHelperfloat64
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelperint{field: "\"closed_trade\".\"id\""},
	Side:             whereHelperstring{field: "\"closed_trade\".\"side\""},
	EntryOrderID:     whereHelperstring{field: "\"closed_trade\".\"entry_order_id\""},
	EntryPrice:       whereHelperfloat64{field: "\"closed_trade\".\"entry_price\""},
	EntryTime:        whereHelpertime_Time{field: "\"closed_trade\".\"entry_time\""},
	StopLossPrice:    whereHelperfloat64{field: "\"closed_trade\".\"stop_loss_price\""},
	StrategyID:       whereHelperstring{field: "\"closed_trade\".\"strategy_id\""},
	Status:           whereHelperstring{field: "\"closed_trade\".\"status\""},
	Pair:             whereHelperstring{field: "\"closed_trade\".\"pair\""},
	ExitTime:         whereHelpertime_Time{field: "\"closed_trade\".\"exit_time\""},
	TakeProfitPrice:  whereHelperfloat32{field: "\"closed_trade\".\"take_profit_price\""},
	ProfitLossPoints: whereHelperfloat32{field: "\"closed_trade\".\"profit_loss_points\""},
	ExitPrice:        whereHelperfloat64{field: "\"closed_trade\".\"exit_price\""},
	CreatedAt:        whereHelpertime_Time{field: "\"closed_trade\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"closed_trade\".\"updated_at\""},
}

// ClosedTradeRels is where relationship names are stored.
var ClosedTradeRels = struct {
}{}

// closedTradeR is where relationships are stored.
type closedTradeR struct {
}

// NewStruct creates a new relationship struct
func (*closedTradeR) NewStruct() *closedTradeR {
	return &closedTradeR{}
}

// closedTradeL is where Load methods for each relationship are stored.
type closedTradeL struct{}

var (
	closedTradeAllColumns            = []string{"id", "side", "entry_order_id", "entry_price", "entry_time", "stop_loss_price", "strategy_id", "status", "pair", "exit_time", "take_profit_price", "profit_loss_points", "exit_price", "created_at", "updated_at"}
	closedTradeColumnsWithoutDefault = []string{"side", "entry_order_id", "entry_price", "entry_time", "stop_loss_price", "strategy_id", "status", "pair", "exit_time", "take_profit_price", "profit_loss_points", "exit_price"}
	closedTradeColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	closedTradePrimaryKeyColumns     = []string{"id"}
)

type (
	// ClosedTradeSlice is an alias for a slice of pointers to ClosedTrade.
	// This should almost always be used instead of []ClosedTrade.
	ClosedTradeSlice []*ClosedTrade
	// ClosedTradeHook is the signature for custom ClosedTrade hook methods
	ClosedTradeHook func(context.Context, boil.ContextExecutor, *ClosedTrade) error

	closedTradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	closedTradeType                 = reflect.TypeOf(&ClosedTrade{})
	closedTradeMapping              = queries.MakeStructMapping(closedTradeType)
	closedTradePrimaryKeyMapping, _ = queries.BindMapping(closedTradeType, closedTradeMapping, closedTradePrimaryKeyColumns)
	closedTradeInsertCacheMut       sync.RWMutex
	closedTradeInsertCache          = make(map[string]insertCache)
	closedTradeUpdateCacheMut       sync.RWMutex
	closedTradeUpdateCache          = make(map[string]updateCache)
	closedTradeUpsertCacheMut       sync.RWMutex
	closedTradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var closedTradeBeforeInsertHooks []ClosedTradeHook
var closedTradeBeforeUpdateHooks []ClosedTradeHook
var closedTradeBeforeDeleteHooks []ClosedTradeHook
var closedTradeBeforeUpsertHooks []ClosedTradeHook

var closedTradeAfterInsertHooks []ClosedTradeHook
var closedTradeAfterSelectHooks []ClosedTradeHook
var closedTradeAfterUpdateHooks []ClosedTradeHook
var closedTradeAfterDeleteHooks []ClosedTradeHook
var closedTradeAfterUpsertHooks []ClosedTradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClosedTrade) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClosedTrade) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClosedTrade) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClosedTrade) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClosedTrade) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClosedTrade) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClosedTrade) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClosedTrade) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClosedTrade) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closedTradeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClosedTradeHook registers your hook function for all future operations.
func AddClosedTradeHook(hookPoint boil.HookPoint, closedTradeHook ClosedTradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		closedTradeBeforeInsertHooks = append(closedTradeBeforeInsertHooks, closedTradeHook)
	case boil.BeforeUpdateHook:
		closedTradeBeforeUpdateHooks = append(closedTradeBeforeUpdateHooks, closedTradeHook)
	case boil.BeforeDeleteHook:
		closedTradeBeforeDeleteHooks = append(closedTradeBeforeDeleteHooks, closedTradeHook)
	case boil.BeforeUpsertHook:
		closedTradeBeforeUpsertHooks = append(closedTradeBeforeUpsertHooks, closedTradeHook)
	case boil.AfterInsertHook:
		closedTradeAfterInsertHooks = append(closedTradeAfterInsertHooks, closedTradeHook)
	case boil.AfterSelectHook:
		closedTradeAfterSelectHooks = append(closedTradeAfterSelectHooks, closedTradeHook)
	case boil.AfterUpdateHook:
		closedTradeAfterUpdateHooks = append(closedTradeAfterUpdateHooks, closedTradeHook)
	case boil.AfterDeleteHook:
		closedTradeAfterDeleteHooks = append(closedTradeAfterDeleteHooks, closedTradeHook)
	case boil.AfterUpsertHook:
		closedTradeAfterUpsertHooks = append(closedTradeAfterUpsertHooks, closedTradeHook)
	}
}

// One returns a single closedTrade record from the query.
func (q closedTradeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClosedTrade, error) {
	o := &ClosedTrade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: failed to execute a one query for closed_trade")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClosedTrade records from the query.
func (q closedTradeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClosedTradeSlice, error) {
	var o []*ClosedTrade

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgres: failed to assign all query results to ClosedTrade slice")
	}

	if len(closedTradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClosedTrade records in the query.
func (q closedTradeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to count closed_trade rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q closedTradeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgres: failed to check if closed_trade exists")
	}

	return count > 0, nil
}

// ClosedTrades retrieves all the records using an executor.
func ClosedTrades(mods ...qm.QueryMod) closedTradeQuery {
	mods = append(mods, qm.From("\"closed_trade\""))
	return closedTradeQuery{NewQuery(mods...)}
}

// FindClosedTrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClosedTrade(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClosedTrade, error) {
	closedTradeObj := &ClosedTrade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"closed_trade\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, closedTradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgres: unable to select from closed_trade")
	}

	if err = closedTradeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return closedTradeObj, err
	}

	return closedTradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClosedTrade) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no closed_trade provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(closedTradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	closedTradeInsertCacheMut.RLock()
	cache, cached := closedTradeInsertCache[key]
	closedTradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			closedTradeAllColumns,
			closedTradeColumnsWithDefault,
			closedTradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(closedTradeType, closedTradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(closedTradeType, closedTradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"closed_trade\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"closed_trade\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgres: unable to insert into closed_trade")
	}

	if !cached {
		closedTradeInsertCacheMut.Lock()
		closedTradeInsertCache[key] = cache
		closedTradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClosedTrade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClosedTrade) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	closedTradeUpdateCacheMut.RLock()
	cache, cached := closedTradeUpdateCache[key]
	closedTradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			closedTradeAllColumns,
			closedTradePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("postgres: unable to update closed_trade, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"closed_trade\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, closedTradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(closedTradeType, closedTradeMapping, append(wl, closedTradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update closed_trade row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by update for closed_trade")
	}

	if !cached {
		closedTradeUpdateCacheMut.Lock()
		closedTradeUpdateCache[key] = cache
		closedTradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q closedTradeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all for closed_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected for closed_trade")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClosedTradeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgres: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), closedTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"closed_trade\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, closedTradePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to update all in closedTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to retrieve rows affected all in update all closedTrade")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClosedTrade) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgres: no closed_trade provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(closedTradeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	closedTradeUpsertCacheMut.RLock()
	cache, cached := closedTradeUpsertCache[key]
	closedTradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			closedTradeAllColumns,
			closedTradeColumnsWithDefault,
			closedTradeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			closedTradeAllColumns,
			closedTradePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgres: unable to upsert closed_trade, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(closedTradePrimaryKeyColumns))
			copy(conflict, closedTradePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"closed_trade\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(closedTradeType, closedTradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(closedTradeType, closedTradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgres: unable to upsert closed_trade")
	}

	if !cached {
		closedTradeUpsertCacheMut.Lock()
		closedTradeUpsertCache[key] = cache
		closedTradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClosedTrade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClosedTrade) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgres: no ClosedTrade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), closedTradePrimaryKeyMapping)
	sql := "DELETE FROM \"closed_trade\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete from closed_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by delete for closed_trade")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q closedTradeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgres: no closedTradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from closed_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for closed_trade")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClosedTradeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(closedTradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), closedTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"closed_trade\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, closedTradePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgres: unable to delete all from closedTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgres: failed to get rows affected by deleteall for closed_trade")
	}

	if len(closedTradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClosedTrade) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClosedTrade(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClosedTradeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClosedTradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), closedTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"closed_trade\".* FROM \"closed_trade\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, closedTradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgres: unable to reload all in ClosedTradeSlice")
	}

	*o = slice

	return nil
}

// ClosedTradeExists checks if the ClosedTrade row exists.
func ClosedTradeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"closed_trade\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgres: unable to check if closed_trade exists")
	}

	return exists, nil
}
