// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlite3

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/randomize"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLiveOrders(t *testing.T) {
	t.Parallel()

	query := LiveOrders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLiveOrdersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLiveOrdersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LiveOrders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLiveOrdersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LiveOrderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLiveOrdersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LiveOrderExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LiveOrder exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LiveOrderExists to return true, but got false.")
	}
}

func testLiveOrdersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	liveOrderFound, err := FindLiveOrder(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if liveOrderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLiveOrdersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LiveOrders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLiveOrdersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LiveOrders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLiveOrdersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	liveOrderOne := &LiveOrder{}
	liveOrderTwo := &LiveOrder{}
	if err = randomize.Struct(seed, liveOrderOne, liveOrderDBTypes, false, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}
	if err = randomize.Struct(seed, liveOrderTwo, liveOrderDBTypes, false, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = liveOrderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = liveOrderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LiveOrders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLiveOrdersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	liveOrderOne := &LiveOrder{}
	liveOrderTwo := &LiveOrder{}
	if err = randomize.Struct(seed, liveOrderOne, liveOrderDBTypes, false, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}
	if err = randomize.Struct(seed, liveOrderTwo, liveOrderDBTypes, false, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = liveOrderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = liveOrderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func liveOrderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func liveOrderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LiveOrder) error {
	*o = LiveOrder{}
	return nil
}

func testLiveOrdersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LiveOrder{}
	o := &LiveOrder{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, liveOrderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LiveOrder object: %s", err)
	}

	AddLiveOrderHook(boil.BeforeInsertHook, liveOrderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	liveOrderBeforeInsertHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.AfterInsertHook, liveOrderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	liveOrderAfterInsertHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.AfterSelectHook, liveOrderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	liveOrderAfterSelectHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.BeforeUpdateHook, liveOrderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	liveOrderBeforeUpdateHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.AfterUpdateHook, liveOrderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	liveOrderAfterUpdateHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.BeforeDeleteHook, liveOrderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	liveOrderBeforeDeleteHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.AfterDeleteHook, liveOrderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	liveOrderAfterDeleteHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.BeforeUpsertHook, liveOrderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	liveOrderBeforeUpsertHooks = []LiveOrderHook{}

	AddLiveOrderHook(boil.AfterUpsertHook, liveOrderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	liveOrderAfterUpsertHooks = []LiveOrderHook{}
}

func testLiveOrdersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLiveOrdersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(liveOrderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLiveOrdersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLiveOrdersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LiveOrderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLiveOrdersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LiveOrders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	liveOrderDBTypes = map[string]string{`ID`: `INTEGER`, `Status`: `TEXT`, `OrderType`: `TEXT`, `Exchange`: `TEXT`, `StrategyID`: `TEXT`, `InternalID`: `TEXT`, `Side`: `TEXT`, `ClientOrderID`: `TEXT`, `Amount`: `REAL`, `Symbol`: `TEXT`, `Price`: `REAL`, `Fee`: `REAL`, `Cost`: `REAL`, `CreatedAt`: `TIMESTAMP`, `UpdatedAt`: `TIMESTAMP`, `SubmittedAt`: `TIMESTAMP`, `CancelledAt`: `TIMESTAMP`, `FilledAt`: `TIMESTAMP`, `AssetType`: `INT`}
	_                = bytes.MinRead
)

func testLiveOrdersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(liveOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(liveOrderAllColumns) == len(liveOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLiveOrdersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(liveOrderAllColumns) == len(liveOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LiveOrder{}
	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LiveOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, liveOrderDBTypes, true, liveOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LiveOrder struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(liveOrderAllColumns, liveOrderPrimaryKeyColumns) {
		fields = liveOrderAllColumns
	} else {
		fields = strmangle.SetComplement(
			liveOrderAllColumns,
			liveOrderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LiveOrderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
