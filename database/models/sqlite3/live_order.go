// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlite3

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/queries/qm"
	"github.com/thrasher-corp/sqlboiler/queries/qmhelper"
	"github.com/thrasher-corp/sqlboiler/strmangle"
	"github.com/volatiletech/null"
)

// LiveOrder is an object representing the database table.
type LiveOrder struct {
	ID            int64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Status        string       `boil:"status" json:"status" toml:"status" yaml:"status"`
	OrderType     string       `boil:"order_type" json:"order_type" toml:"order_type" yaml:"order_type"`
	Exchange      string       `boil:"exchange" json:"exchange" toml:"exchange" yaml:"exchange"`
	StrategyID    string       `boil:"strategy_id" json:"strategy_id" toml:"strategy_id" yaml:"strategy_id"`
	InternalID    string       `boil:"internal_id" json:"internal_id" toml:"internal_id" yaml:"internal_id"`
	Side          null.String  `boil:"side" json:"side,omitempty" toml:"side" yaml:"side,omitempty"`
	ClientOrderID null.String  `boil:"client_order_id" json:"client_order_id,omitempty" toml:"client_order_id" yaml:"client_order_id,omitempty"`
	Amount        null.Float64 `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	Symbol        null.String  `boil:"symbol" json:"symbol,omitempty" toml:"symbol" yaml:"symbol,omitempty"`
	Price         null.Float64 `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Fee           null.Float64 `boil:"fee" json:"fee,omitempty" toml:"fee" yaml:"fee,omitempty"`
	Cost          null.Float64 `boil:"cost" json:"cost,omitempty" toml:"cost" yaml:"cost,omitempty"`
	SubmittedAt   null.String  `boil:"submitted_at" json:"submitted_at,omitempty" toml:"submitted_at" yaml:"submitted_at,omitempty"`
	CancelledAt   null.String  `boil:"cancelled_at" json:"cancelled_at,omitempty" toml:"cancelled_at" yaml:"cancelled_at,omitempty"`
	FilledAt      null.String  `boil:"filled_at" json:"filled_at,omitempty" toml:"filled_at" yaml:"filled_at,omitempty"`
	AssetType     null.Int64   `boil:"asset_type" json:"asset_type,omitempty" toml:"asset_type" yaml:"asset_type,omitempty"`
	CreatedAt     string       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     string       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *liveOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L liveOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LiveOrderColumns = struct {
	ID            string
	Status        string
	OrderType     string
	Exchange      string
	StrategyID    string
	InternalID    string
	Side          string
	ClientOrderID string
	Amount        string
	Symbol        string
	Price         string
	Fee           string
	Cost          string
	SubmittedAt   string
	CancelledAt   string
	FilledAt      string
	AssetType     string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Status:        "status",
	OrderType:     "order_type",
	Exchange:      "exchange",
	StrategyID:    "strategy_id",
	InternalID:    "internal_id",
	Side:          "side",
	ClientOrderID: "client_order_id",
	Amount:        "amount",
	Symbol:        "symbol",
	Price:         "price",
	Fee:           "fee",
	Cost:          "cost",
	SubmittedAt:   "submitted_at",
	CancelledAt:   "cancelled_at",
	FilledAt:      "filled_at",
	AssetType:     "asset_type",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// Generated where

var LiveOrderWhere = struct {
	ID            whereHelperint64
	Status        whereHelperstring
	OrderType     whereHelperstring
	Exchange      whereHelperstring
	StrategyID    whereHelperstring
	InternalID    whereHelperstring
	Side          whereHelpernull_String
	ClientOrderID whereHelpernull_String
	Amount        whereHelpernull_Float64
	Symbol        whereHelpernull_String
	Price         whereHelpernull_Float64
	Fee           whereHelpernull_Float64
	Cost          whereHelpernull_Float64
	SubmittedAt   whereHelpernull_String
	CancelledAt   whereHelpernull_String
	FilledAt      whereHelpernull_String
	AssetType     whereHelpernull_Int64
	CreatedAt     whereHelperstring
	UpdatedAt     whereHelperstring
}{
	ID:            whereHelperint64{field: "\"live_order\".\"id\""},
	Status:        whereHelperstring{field: "\"live_order\".\"status\""},
	OrderType:     whereHelperstring{field: "\"live_order\".\"order_type\""},
	Exchange:      whereHelperstring{field: "\"live_order\".\"exchange\""},
	StrategyID:    whereHelperstring{field: "\"live_order\".\"strategy_id\""},
	InternalID:    whereHelperstring{field: "\"live_order\".\"internal_id\""},
	Side:          whereHelpernull_String{field: "\"live_order\".\"side\""},
	ClientOrderID: whereHelpernull_String{field: "\"live_order\".\"client_order_id\""},
	Amount:        whereHelpernull_Float64{field: "\"live_order\".\"amount\""},
	Symbol:        whereHelpernull_String{field: "\"live_order\".\"symbol\""},
	Price:         whereHelpernull_Float64{field: "\"live_order\".\"price\""},
	Fee:           whereHelpernull_Float64{field: "\"live_order\".\"fee\""},
	Cost:          whereHelpernull_Float64{field: "\"live_order\".\"cost\""},
	SubmittedAt:   whereHelpernull_String{field: "\"live_order\".\"submitted_at\""},
	CancelledAt:   whereHelpernull_String{field: "\"live_order\".\"cancelled_at\""},
	FilledAt:      whereHelpernull_String{field: "\"live_order\".\"filled_at\""},
	AssetType:     whereHelpernull_Int64{field: "\"live_order\".\"asset_type\""},
	CreatedAt:     whereHelperstring{field: "\"live_order\".\"created_at\""},
	UpdatedAt:     whereHelperstring{field: "\"live_order\".\"updated_at\""},
}

// LiveOrderRels is where relationship names are stored.
var LiveOrderRels = struct {
}{}

// liveOrderR is where relationships are stored.
type liveOrderR struct {
}

// NewStruct creates a new relationship struct
func (*liveOrderR) NewStruct() *liveOrderR {
	return &liveOrderR{}
}

// liveOrderL is where Load methods for each relationship are stored.
type liveOrderL struct{}

var (
	liveOrderAllColumns            = []string{"id", "status", "order_type", "exchange", "strategy_id", "internal_id", "side", "client_order_id", "amount", "symbol", "price", "fee", "cost", "submitted_at", "cancelled_at", "filled_at", "asset_type", "created_at", "updated_at"}
	liveOrderColumnsWithoutDefault = []string{}
	liveOrderColumnsWithDefault    = []string{"id", "status", "order_type", "exchange", "strategy_id", "internal_id", "side", "client_order_id", "amount", "symbol", "price", "fee", "cost", "submitted_at", "cancelled_at", "filled_at", "asset_type", "created_at", "updated_at"}
	liveOrderPrimaryKeyColumns     = []string{"id"}
)

type (
	// LiveOrderSlice is an alias for a slice of pointers to LiveOrder.
	// This should generally be used opposed to []LiveOrder.
	LiveOrderSlice []*LiveOrder
	// LiveOrderHook is the signature for custom LiveOrder hook methods
	LiveOrderHook func(context.Context, boil.ContextExecutor, *LiveOrder) error

	liveOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	liveOrderType                 = reflect.TypeOf(&LiveOrder{})
	liveOrderMapping              = queries.MakeStructMapping(liveOrderType)
	liveOrderPrimaryKeyMapping, _ = queries.BindMapping(liveOrderType, liveOrderMapping, liveOrderPrimaryKeyColumns)
	liveOrderInsertCacheMut       sync.RWMutex
	liveOrderInsertCache          = make(map[string]insertCache)
	liveOrderUpdateCacheMut       sync.RWMutex
	liveOrderUpdateCache          = make(map[string]updateCache)
	liveOrderUpsertCacheMut       sync.RWMutex
	liveOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var liveOrderBeforeInsertHooks []LiveOrderHook
var liveOrderBeforeUpdateHooks []LiveOrderHook
var liveOrderBeforeDeleteHooks []LiveOrderHook
var liveOrderBeforeUpsertHooks []LiveOrderHook

var liveOrderAfterInsertHooks []LiveOrderHook
var liveOrderAfterSelectHooks []LiveOrderHook
var liveOrderAfterUpdateHooks []LiveOrderHook
var liveOrderAfterDeleteHooks []LiveOrderHook
var liveOrderAfterUpsertHooks []LiveOrderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LiveOrder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LiveOrder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LiveOrder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LiveOrder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LiveOrder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LiveOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LiveOrder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LiveOrder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LiveOrder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveOrderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLiveOrderHook registers your hook function for all future operations.
func AddLiveOrderHook(hookPoint boil.HookPoint, liveOrderHook LiveOrderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		liveOrderBeforeInsertHooks = append(liveOrderBeforeInsertHooks, liveOrderHook)
	case boil.BeforeUpdateHook:
		liveOrderBeforeUpdateHooks = append(liveOrderBeforeUpdateHooks, liveOrderHook)
	case boil.BeforeDeleteHook:
		liveOrderBeforeDeleteHooks = append(liveOrderBeforeDeleteHooks, liveOrderHook)
	case boil.BeforeUpsertHook:
		liveOrderBeforeUpsertHooks = append(liveOrderBeforeUpsertHooks, liveOrderHook)
	case boil.AfterInsertHook:
		liveOrderAfterInsertHooks = append(liveOrderAfterInsertHooks, liveOrderHook)
	case boil.AfterSelectHook:
		liveOrderAfterSelectHooks = append(liveOrderAfterSelectHooks, liveOrderHook)
	case boil.AfterUpdateHook:
		liveOrderAfterUpdateHooks = append(liveOrderAfterUpdateHooks, liveOrderHook)
	case boil.AfterDeleteHook:
		liveOrderAfterDeleteHooks = append(liveOrderAfterDeleteHooks, liveOrderHook)
	case boil.AfterUpsertHook:
		liveOrderAfterUpsertHooks = append(liveOrderAfterUpsertHooks, liveOrderHook)
	}
}

// One returns a single liveOrder record from the query.
func (q liveOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LiveOrder, error) {
	o := &LiveOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlite3: failed to execute a one query for live_order")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LiveOrder records from the query.
func (q liveOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (LiveOrderSlice, error) {
	var o []*LiveOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlite3: failed to assign all query results to LiveOrder slice")
	}

	if len(liveOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LiveOrder records in the query.
func (q liveOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to count live_order rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q liveOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlite3: failed to check if live_order exists")
	}

	return count > 0, nil
}

// LiveOrders retrieves all the records using an executor.
func LiveOrders(mods ...qm.QueryMod) liveOrderQuery {
	mods = append(mods, qm.From("\"live_order\""))
	return liveOrderQuery{NewQuery(mods...)}
}

// FindLiveOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLiveOrder(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*LiveOrder, error) {
	liveOrderObj := &LiveOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"live_order\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, liveOrderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlite3: unable to select from live_order")
	}

	return liveOrderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LiveOrder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlite3: no live_order provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(liveOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	liveOrderInsertCacheMut.RLock()
	cache, cached := liveOrderInsertCache[key]
	liveOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			liveOrderAllColumns,
			liveOrderColumnsWithDefault,
			liveOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(liveOrderType, liveOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(liveOrderType, liveOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"live_order\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"live_order\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"live_order\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, liveOrderPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlite3: unable to insert into live_order")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == liveOrderMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlite3: unable to populate default values for live_order")
	}

CacheNoHooks:
	if !cached {
		liveOrderInsertCacheMut.Lock()
		liveOrderInsertCache[key] = cache
		liveOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LiveOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LiveOrder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	liveOrderUpdateCacheMut.RLock()
	cache, cached := liveOrderUpdateCache[key]
	liveOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			liveOrderAllColumns,
			liveOrderPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("sqlite3: unable to update live_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"live_order\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, liveOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(liveOrderType, liveOrderMapping, append(wl, liveOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to update live_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by update for live_order")
	}

	if !cached {
		liveOrderUpdateCacheMut.Lock()
		liveOrderUpdateCache[key] = cache
		liveOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q liveOrderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to update all for live_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to retrieve rows affected for live_order")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LiveOrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlite3: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"live_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, liveOrderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to update all in liveOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to retrieve rows affected all in update all liveOrder")
	}
	return rowsAff, nil
}

// Delete deletes a single LiveOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LiveOrder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlite3: no LiveOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), liveOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"live_order\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to delete from live_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by delete for live_order")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q liveOrderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlite3: no liveOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to delete all from live_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by deleteall for live_order")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LiveOrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(liveOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"live_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, liveOrderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to delete all from liveOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by deleteall for live_order")
	}

	if len(liveOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LiveOrder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLiveOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LiveOrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LiveOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"live_order\".* FROM \"live_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, liveOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlite3: unable to reload all in LiveOrderSlice")
	}

	*o = slice

	return nil
}

// LiveOrderExists checks if the LiveOrder row exists.
func LiveOrderExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"live_order\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlite3: unable to check if live_order exists")
	}

	return exists, nil
}
