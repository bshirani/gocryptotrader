// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlite3

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/queries/qm"
	"github.com/thrasher-corp/sqlboiler/queries/qmhelper"
	"github.com/thrasher-corp/sqlboiler/strmangle"
	"github.com/volatiletech/null"
)

// LiveTrade is an object representing the database table.
type LiveTrade struct {
	ID              null.Int64   `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	EntryPrice      float64      `boil:"entry_price" json:"entry_price" toml:"entry_price" yaml:"entry_price"`
	StopLossPrice   float64      `boil:"stop_loss_price" json:"stop_loss_price" toml:"stop_loss_price" yaml:"stop_loss_price"`
	TakeProfitPrice null.Float64 `boil:"take_profit_price" json:"take_profit_price,omitempty" toml:"take_profit_price" yaml:"take_profit_price,omitempty"`
	ExitPrice       null.Float64 `boil:"exit_price" json:"exit_price,omitempty" toml:"exit_price" yaml:"exit_price,omitempty"`

	R *liveTradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L liveTradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LiveTradeColumns = struct {
	ID              string
	EntryPrice      string
	StopLossPrice   string
	TakeProfitPrice string
	ExitPrice       string
}{
	ID:              "id",
	EntryPrice:      "entry_price",
	StopLossPrice:   "stop_loss_price",
	TakeProfitPrice: "take_profit_price",
	ExitPrice:       "exit_price",
}

// Generated where

var LiveTradeWhere = struct {
	ID              whereHelpernull_Int64
	EntryPrice      whereHelperfloat64
	StopLossPrice   whereHelperfloat64
	TakeProfitPrice whereHelpernull_Float64
	ExitPrice       whereHelpernull_Float64
}{
	ID:              whereHelpernull_Int64{field: "\"live_trade\".\"id\""},
	EntryPrice:      whereHelperfloat64{field: "\"live_trade\".\"entry_price\""},
	StopLossPrice:   whereHelperfloat64{field: "\"live_trade\".\"stop_loss_price\""},
	TakeProfitPrice: whereHelpernull_Float64{field: "\"live_trade\".\"take_profit_price\""},
	ExitPrice:       whereHelpernull_Float64{field: "\"live_trade\".\"exit_price\""},
}

// LiveTradeRels is where relationship names are stored.
var LiveTradeRels = struct {
}{}

// liveTradeR is where relationships are stored.
type liveTradeR struct {
}

// NewStruct creates a new relationship struct
func (*liveTradeR) NewStruct() *liveTradeR {
	return &liveTradeR{}
}

// liveTradeL is where Load methods for each relationship are stored.
type liveTradeL struct{}

var (
	liveTradeAllColumns            = []string{"id", "entry_price", "stop_loss_price", "take_profit_price", "exit_price"}
	liveTradeColumnsWithoutDefault = []string{}
	liveTradeColumnsWithDefault    = []string{"id", "entry_price", "stop_loss_price", "take_profit_price", "exit_price"}
	liveTradePrimaryKeyColumns     = []string{"id"}
)

type (
	// LiveTradeSlice is an alias for a slice of pointers to LiveTrade.
	// This should generally be used opposed to []LiveTrade.
	LiveTradeSlice []*LiveTrade
	// LiveTradeHook is the signature for custom LiveTrade hook methods
	LiveTradeHook func(context.Context, boil.ContextExecutor, *LiveTrade) error

	liveTradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	liveTradeType                 = reflect.TypeOf(&LiveTrade{})
	liveTradeMapping              = queries.MakeStructMapping(liveTradeType)
	liveTradePrimaryKeyMapping, _ = queries.BindMapping(liveTradeType, liveTradeMapping, liveTradePrimaryKeyColumns)
	liveTradeInsertCacheMut       sync.RWMutex
	liveTradeInsertCache          = make(map[string]insertCache)
	liveTradeUpdateCacheMut       sync.RWMutex
	liveTradeUpdateCache          = make(map[string]updateCache)
	liveTradeUpsertCacheMut       sync.RWMutex
	liveTradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var liveTradeBeforeInsertHooks []LiveTradeHook
var liveTradeBeforeUpdateHooks []LiveTradeHook
var liveTradeBeforeDeleteHooks []LiveTradeHook
var liveTradeBeforeUpsertHooks []LiveTradeHook

var liveTradeAfterInsertHooks []LiveTradeHook
var liveTradeAfterSelectHooks []LiveTradeHook
var liveTradeAfterUpdateHooks []LiveTradeHook
var liveTradeAfterDeleteHooks []LiveTradeHook
var liveTradeAfterUpsertHooks []LiveTradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LiveTrade) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LiveTrade) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LiveTrade) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LiveTrade) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LiveTrade) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LiveTrade) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LiveTrade) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LiveTrade) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LiveTrade) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range liveTradeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLiveTradeHook registers your hook function for all future operations.
func AddLiveTradeHook(hookPoint boil.HookPoint, liveTradeHook LiveTradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		liveTradeBeforeInsertHooks = append(liveTradeBeforeInsertHooks, liveTradeHook)
	case boil.BeforeUpdateHook:
		liveTradeBeforeUpdateHooks = append(liveTradeBeforeUpdateHooks, liveTradeHook)
	case boil.BeforeDeleteHook:
		liveTradeBeforeDeleteHooks = append(liveTradeBeforeDeleteHooks, liveTradeHook)
	case boil.BeforeUpsertHook:
		liveTradeBeforeUpsertHooks = append(liveTradeBeforeUpsertHooks, liveTradeHook)
	case boil.AfterInsertHook:
		liveTradeAfterInsertHooks = append(liveTradeAfterInsertHooks, liveTradeHook)
	case boil.AfterSelectHook:
		liveTradeAfterSelectHooks = append(liveTradeAfterSelectHooks, liveTradeHook)
	case boil.AfterUpdateHook:
		liveTradeAfterUpdateHooks = append(liveTradeAfterUpdateHooks, liveTradeHook)
	case boil.AfterDeleteHook:
		liveTradeAfterDeleteHooks = append(liveTradeAfterDeleteHooks, liveTradeHook)
	case boil.AfterUpsertHook:
		liveTradeAfterUpsertHooks = append(liveTradeAfterUpsertHooks, liveTradeHook)
	}
}

// One returns a single liveTrade record from the query.
func (q liveTradeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LiveTrade, error) {
	o := &LiveTrade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlite3: failed to execute a one query for live_trade")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LiveTrade records from the query.
func (q liveTradeQuery) All(ctx context.Context, exec boil.ContextExecutor) (LiveTradeSlice, error) {
	var o []*LiveTrade

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlite3: failed to assign all query results to LiveTrade slice")
	}

	if len(liveTradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LiveTrade records in the query.
func (q liveTradeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to count live_trade rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q liveTradeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlite3: failed to check if live_trade exists")
	}

	return count > 0, nil
}

// LiveTrades retrieves all the records using an executor.
func LiveTrades(mods ...qm.QueryMod) liveTradeQuery {
	mods = append(mods, qm.From("\"live_trade\""))
	return liveTradeQuery{NewQuery(mods...)}
}

// FindLiveTrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLiveTrade(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*LiveTrade, error) {
	liveTradeObj := &LiveTrade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"live_trade\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, liveTradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlite3: unable to select from live_trade")
	}

	return liveTradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LiveTrade) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlite3: no live_trade provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(liveTradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	liveTradeInsertCacheMut.RLock()
	cache, cached := liveTradeInsertCache[key]
	liveTradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			liveTradeAllColumns,
			liveTradeColumnsWithDefault,
			liveTradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"live_trade\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"live_trade\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"live_trade\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, liveTradePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlite3: unable to insert into live_trade")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlite3: unable to populate default values for live_trade")
	}

CacheNoHooks:
	if !cached {
		liveTradeInsertCacheMut.Lock()
		liveTradeInsertCache[key] = cache
		liveTradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LiveTrade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LiveTrade) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	liveTradeUpdateCacheMut.RLock()
	cache, cached := liveTradeUpdateCache[key]
	liveTradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			liveTradeAllColumns,
			liveTradePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("sqlite3: unable to update live_trade, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"live_trade\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, liveTradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(liveTradeType, liveTradeMapping, append(wl, liveTradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to update live_trade row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by update for live_trade")
	}

	if !cached {
		liveTradeUpdateCacheMut.Lock()
		liveTradeUpdateCache[key] = cache
		liveTradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q liveTradeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to update all for live_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to retrieve rows affected for live_trade")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LiveTradeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlite3: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"live_trade\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, liveTradePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to update all in liveTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to retrieve rows affected all in update all liveTrade")
	}
	return rowsAff, nil
}

// Delete deletes a single LiveTrade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LiveTrade) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlite3: no LiveTrade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), liveTradePrimaryKeyMapping)
	sql := "DELETE FROM \"live_trade\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to delete from live_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by delete for live_trade")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q liveTradeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlite3: no liveTradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to delete all from live_trade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by deleteall for live_trade")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LiveTradeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(liveTradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"live_trade\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, liveTradePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: unable to delete all from liveTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite3: failed to get rows affected by deleteall for live_trade")
	}

	if len(liveTradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LiveTrade) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLiveTrade(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LiveTradeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LiveTradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), liveTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"live_trade\".* FROM \"live_trade\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, liveTradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlite3: unable to reload all in LiveTradeSlice")
	}

	*o = slice

	return nil
}

// LiveTradeExists checks if the LiveTrade row exists.
func LiveTradeExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"live_trade\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlite3: unable to check if live_trade exists")
	}

	return exists, nil
}
