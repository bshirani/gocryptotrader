#
# [[types]]
#   # The match is a drivers.Column struct, and matches on almost all fields.
#   # Notable exception for the unique bool. Matches are done
#   # with "logical and" meaning it must match all specified matchers.
#   # Boolean values are only checked if all the string specifiers match first,
#   # and they must always match.
#   #
#   # Not shown here: db_type is the database type and a very useful matcher
#   # We can also whitelist tables for this replace by adding to the types.match:
#   # tables = ['users', 'videos']
#   #
#   # Note there is precedence for types.match, more specific things should appear
#   # further down in the config as once a matching rule is found it is executed
#   # immediately.
#   [types.match]
#     type = "null.String"
#     nullable = true
#
#   # The replace is what we replace the strings with. You cannot modify any
#   # boolean values in here. But we could change the Go type (the most useful thing)
#   # or the DBType or FullDBType etc. if for some reason we needed to.
#   [types.replace]
#     type = "mynull.String"
#
#   # These imports specified here overwrite the definition of the type's "based_on_type"
#   # list. The type entry that is replaced is the replaced type's "type" field.
#   # In the above example it would add an entry for mynull.String, if we did not
#   # change the type in our replacement, it would overwrite the null.String entry.
#   [types.imports]
#     third_party = ['"github.com/me/mynull"']
#
