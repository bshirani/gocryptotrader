package indicators

import (
	"testing"
)

// nolint dupl false positive
func TestSMA(t *testing.T) {
	expectedOutput := []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7256.463571428571, 7245.534999999999, 7277.432857142857, 7342.2535714285705, 7402.871428571429, 7447.0485714285705, 7515.191428571428, 7566.61857142857, 7623.419999999999, 7686.617857142856, 7804.094999999999, 7920.558571428571, 8046.24357142857, 8157.223571428571, 8268.941428571428, 8364.648571428572, 8426.250714285716, 8466.170714285716, 8509.848571428573, 8550.68142857143, 8566.547857142858, 8588.925000000001, 8618.190714285714, 8674.585714285713, 8716.511428571428, 8750.797857142856, 8807.215714285714, 8838.302857142857, 8871.777142857141, 8916.976428571428, 8964.327857142856, 8995.862142857142, 9064.611428571428, 9162.910714285714, 9261.574285714285, 9373.895714285713, 9487.002142857144, 9555.25, 9617.320000000002, 9693.005714285715, 9745.05357142857, 9819.06714285714, 9856.396428571428, 9898.074999999999, 9927.29357142857, 10000.565, 9998.94357142857, 9988.81, 9981.146428571428, 9964.441428571428, 9949.529999999999, 9935.427857142857, 9866.600714285716, 9754.499285714284, 9653.630000000001, 9535.044285714286, 9437.041428571427, 9338.18857142857, 9282.487857142856, 9180.365, 9120.190714285714, 9081.182857142856, 9042.444285714286, 8987.144285714285, 8849.179285714283, 8726.584285714283, 8625.192857142856, 8564.850714285712, 8280.934285714286, 8060.855714285715, 7820.972142857144, 7593.45, 7316.027142857143, 7070.994285714286, 6831.9685714285715, 6625.863571428571, 6415.602857142859, 6222.306428571428, 6063.695714285713, 5960.642857142856, 5880.837142857142, 5792.097857142857, 5929.172857142857, 5982.979285714285, 6060.387142857143, 6098.0485714285705, 6163.304999999999}

	ret := SMA(testClose, 14)
	if len(ret) != len(expectedOutput) {
		t.Fatalf("unexpected length of return slice %v", len(ret))
	}

	for x := range ret {
		if ret[x] != expectedOutput[x] {
			t.Fatalf("unexpected value returned %v", ret[x])
		}
	}

	ret = SMA([]float64{10, 5.0}, 15)
	if ret[0] != 0 {
		t.Fatalf("unexpected value returned %v", ret[0])
	}
}

// nolint dupl false positive
func TestEMA(t *testing.T) {
	expectedOutput := []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7256.463571428571, 7269.828428571429, 7335.549971428572, 7445.344641904762, 7525.224022984127, 7562.764819919577, 7647.729510596967, 7696.861575850705, 7761.3813657372775, 7807.1985169723075, 7941.310714709333, 8057.025286081423, 8144.108581270566, 8243.911437101156, 8332.527245487669, 8381.070279422645, 8413.616908832959, 8454.186654321898, 8481.08576707898, 8467.399664801782, 8461.363709494877, 8443.781881562227, 8463.341630687262, 8520.834746595627, 8638.056780382876, 8724.87320966516, 8828.223448376471, 8894.840321926275, 8959.150945669438, 9008.516152913513, 9045.792665858378, 9060.936310410594, 9135.267469022516, 9217.849139819513, 9295.925254510244, 9376.735220575545, 9483.033191165472, 9531.96343234341, 9630.232308030954, 9726.038666960161, 9793.05617803214, 9869.187354294521, 9873.266373721919, 9878.54952389233, 9854.362920706686, 9898.470531279128, 9858.103793775244, 9825.391287938544, 9808.15644954674, 9789.48625627384, 9812.91608877066, 9791.537943601239, 9726.719551121074, 9600.404944304932, 9495.884285064274, 9390.278380389038, 9275.273263003834, 9175.763494603323, 9141.307028656214, 9089.859424835386, 9044.982168190667, 9047.871212431912, 9061.99371744099, 9039.58522178219, 8905.467192211232, 8776.238233249735, 8657.529135483102, 8561.134584085356, 8065.205972873975, 7739.543843157445, 7396.853997403119, 7123.092131082703, 6844.469180271676, 6641.871956235453, 6477.211695404059, 6437.740802683518, 6407.394028992382, 6378.112158460064, 6302.783870665389, 6328.214021243338, 6386.937485077559, 6427.641820400551, 6472.052244347145, 6459.249278434192, 6431.760041309633, 6356.978702468349, 6302.3162088059025}

	ret := EMA(testClose, 14)
	if len(ret) != len(expectedOutput) {
		t.Fatalf("unexpected length of return slice %v", len(ret))
	}

	for x := range ret {
		if ret[x] != expectedOutput[x] {
			t.Fatalf("unexpected value returned %v", ret[x])
		}
	}

	ret = EMA([]float64{10, 5.0}, 15)
	if ret[0] != 0 {
		t.Fatalf("unexpected value returned %v", ret[0])
	}

	ret = MA(testClose, 14, Ema)
	if len(ret) != len(expectedOutput) {
		t.Fatalf("unexpected length of return slice %v", len(ret))
	}

	for x := range ret {
		if ret[x] != expectedOutput[x] {
			t.Fatalf("unexpected value returned %v", ret[x])
		}
	}
}

func TestMA(t *testing.T) {
	ret := MA([]float64{10, 0}, 1, Sma)
	if ret[0] != 10 && ret[1] != 0 {
		t.Fatalf("unexpected values returned %v | %v", ret[0], ret[1])
	}
}

func TestMACD(t *testing.T) {
	expectedOutput := []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384.56291818286354, 342.45086208073735, 326.37342938442, 334.3132934612713, 377.0457420290477, 397.38842119720175, 425.61532457741123, 429.1473391963518, 430.95837812348327, 423.6545667060109, 409.80964816860615, 384.02403224136833, 396.0646575719784, 411.8503935709232, 423.4167634439327, 435.51740350462205, 461.7304131988403, 451.1628234926138, 471.16402445220774, 487.8309024182472, 485.7482466660749, 489.379690203079, 449.6128759918647, 414.3785585786136, 364.8410328721784, 360.8022189099029, 306.5045473564405, 261.8300235198931, 230.49539631439438, 201.08512831789994, 199.45001660192247, 170.95686620790184, 118.98967582845034, 34.95532808582175, -28.31916462519257, -86.5575943603144, -145.24744564156208, -189.4777570939168, -190.98916627061772, -202.911106038453, -210.11238527492242, -188.36179339153205, -162.22281919922716, -160.62444546794177, -226.16401652784407, -282.70910477673715, -327.80398468938256, -355.5181614335979, -619.907124279539, -757.6774270872747, -893.1488902319425, -975.2072856845234, -1053.131472598261, -1078.922542429842, -1080.2980809881474, -1007.3003624114554, -936.3190118181901, -871.820244124684, -841.2367623804885, -753.4148691349728, -654.0749257758371, -574.8868228502934, -500.8290576197369, -467.7866597026932, -446.3758162098229, -455.00132838823083, -450.5025549851234}
	expectedOutput2 := []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499.4721770310679, 468.06791404100176, 439.7290171096854, 418.6458723800026, 410.3258463098116, 407.73836128728965, 411.313753945314, 414.88047099552153, 418.0960524211139, 419.20775527809326, 417.32813385619585, 410.66731353323036, 407.74678234097996, 408.5675045869686, 411.5373563583614, 416.33336578761356, 425.4127752698589, 430.5627849144099, 438.6830328219695, 448.51260674122506, 455.95973472619505, 462.6437258215718, 460.0375558556304, 450.905756400227, 433.69281169461726, 419.1146931376744, 396.5926639814276, 369.6401358891207, 341.8111879741754, 313.6659760429203, 290.82278415472075, 266.849600565357, 237.27761561797564, 196.81315811154485, 151.78669356419738, 104.11783597929502, 54.2447796551236, 5.500272305315512, -33.797615409871135, -67.62031353558751, -96.1187278834545, -114.56734098507, -124.09843662790144, -131.4036383959095, -150.3557140222964, -176.82639217318456, -207.02191067642417, -236.7211608278589, -313.3583535181949, -402.22216823201086, -500.4075126319972, -595.3674672425025, -686.9202683136542, -765.3207231368917, -828.3161947071428, -864.1130282480053, -878.5542249620423, -877.2074287945707, -870.0132955117542, -846.693610236398, -808.1698733442857, -761.5132632454872, -709.3764221203371, -661.0584696368084, -618.1219389514113, -585.4978168387752, -558.4987644680448}
	expectedOutput3 := []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114.90925884820433, -125.6170519602644, -113.35558772526542, -84.33257891873126, -33.28010428076391, -10.349940090087898, 14.301570632097253, 14.266868200830288, 12.86232570236939, 4.446811427917623, -7.518485687589703, -26.643281291862024, -11.682124769001575, 3.2828889839545923, 11.879407085571302, 19.184037717008493, 36.31763792898141, 20.600038578203907, 32.480991630238236, 39.31829567702215, 29.788511939879868, 26.735964381507188, -10.424679863765675, -36.52719782161341, -68.85177882243886, -58.31247422777153, -90.0881166249871, -107.81011236922762, -111.31579165978104, -112.58084772502036, -91.37276755279828, -95.89273435745514, -118.2879397895253, -161.8578300257231, -180.10585818938995, -190.67543033960942, -199.4922252966857, -194.97802939923233, -157.1915508607466, -135.2907925028655, -113.99365739146792, -73.79445240646204, -38.124382571325725, -29.220807072032272, -75.80830250554766, -105.88271260355259, -120.78207401295839, -118.79700060573902, -306.54877076134403, -355.4552588552639, -392.7413775999453, -379.83981844202094, -366.2112042846069, -313.60181929295027, -251.98188628100456, -143.18733416345003, -57.76478685614779, 5.387184669886665, 28.77653313126575, 93.27874110142511, 154.09494756844867, 186.62644039519387, 208.54736450060022, 193.27180993411514, 171.74612274158835, 130.49648845054435, 107.99620948292136}
	ret, ret2, ret3 := MACD(testClose, 12, 26, 9)
	if len(ret) != len(expectedOutput) || len(ret2) != len(expectedOutput2) || len(ret3) != len(expectedOutput3) {
		t.Fatalf("unexpected length of return slice %v", len(ret))
	}

	for x := range ret {
		if ret[x] != expectedOutput[x] {
			t.Fatalf("unexpected value returned %v", ret[x])
		}
		if ret2[x] != expectedOutput2[x] {
			t.Fatalf("unexpected value returned %v", ret2[x])
		}
		if ret3[x] != expectedOutput3[x] {
			t.Fatalf("unexpected value returned %v", ret3[x])
		}
	}
}
